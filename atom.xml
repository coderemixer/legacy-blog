<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码混音师</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://coderemixer.com/"/>
  <updated>2020-08-12T09:41:51.653Z</updated>
  <id>https://coderemixer.com/</id>
  
  <author>
    <name>CodeRemixer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拯救老婆 —— MacBook Pro 维修计划</title>
    <link href="https://coderemixer.com/2020/08/12/save-my-macbook-pro-2016/"/>
    <id>https://coderemixer.com/2020/08/12/save-my-macbook-pro-2016/</id>
    <published>2020-08-12T09:19:58.000Z</published>
    <updated>2020-08-12T09:41:51.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我的老婆不行了"><a href="#我的老婆不行了" class="headerlink" title="我的老婆不行了"></a>我的老婆不行了</h2><p>我的 MacBook Pro 15 (late-2016) 真的不行了。</p><p>作为一款 16 GB 内存，i7-7820HQ CPU 的电脑，实在是卡得不行。特别是在我搬家后，机器已经卡到一个完全不能忍受的地步。<code>kernel_task</code> 进程自己能吃掉 6 GB 的内存，还能吃掉 250% 的 CPU，一丁点道理都没有。我打开 Activity Monitor 仔仔细细研究着这个 <code>kernel_task</code> 到底在干什么。慢慢地我发现了几个问题。</p><h2 id="软件着手研究问题"><a href="#软件着手研究问题" class="headerlink" title="软件着手研究问题"></a>软件着手研究问题</h2><p>首先是内存，我的各种后台程序即使在刚刚开机的情况下也能吃掉 &gt; 20 GB 的内存。而物理内存只有 16 GB，这意味着 <code>swap</code> 介入了。这直接体现就是我的硬盘吞吐量惊人。运行一天 <code>kernel_task</code> 硬盘吞吐量高达 2TB。如果这么下去，先不说机器卡不卡，我对我 SSD 的寿命感到怀疑。特别是这一代的 SSD 并不是可更换的，一旦健康状况出问题，会变得非常麻烦。</p><p>说到硬盘我就发现了另一个问题，一旦我从 NAS 上大量拉数据到硬盘，CPU 占用也会狂飙。这时候我就想到 Mac 的一个芯片问题 —— Apple T1 Chip。在后续机型中，苹果使用的 T2 芯片是能够负责硬盘加解密的，而 T1 芯片其实主要就是 SMC (EC) 芯片的替代，只是加入了 TouchID 指纹芯片的一些特性。这意味着我的电脑的硬盘加解密是跑在 CPU 上的。在我 CPU 如此卡顿的情况下，我必须要从软件上先处理这一问题。</p><p>于是我把系统备份，然后重装成了 macOS Big Sur，同时关闭了 FileVault，暂停了全盘加解密。</p><p><img src="/static/big-sur-beta.jpg" alt="Big Sur"></p><h2 id="是什么在导致-CPU-疯狂降频？"><a href="#是什么在导致-CPU-疯狂降频？" class="headerlink" title="是什么在导致 CPU 疯狂降频？"></a>是什么在导致 CPU 疯狂降频？</h2><p>然而重装后虽然 <code>swap</code> 的问题减轻了，但是机器并不能算快。一旦运行一些负载稍微大一点的应用，比如 Chrome 或者 Firefox，机器还是会变卡。这意味着还有别的问题在困扰我的老婆。</p><p>既然主要问题来自 CPU，于是我去下载了一个 <a href="https://software.intel.com/content/www/us/en/develop/articles/intel-power-gadget.html#attachment-heading" target="_blank" rel="noopener">Intel Power Gadget</a> 来查看 CPU 的具体情况。结果发现，当 CPU 降频发生时，CPU 温度只有 60 多摄氏度，而风扇却已经满载了。严重时，频率降到了 1.0GHz，远远低于 CPU 的基础频率。这意味着，有别的东西在引发降频。正当我一筹莫展的时候，我把充电线一拔，突然 CPU 频率就回去了（？？？）</p><p>于是我尝试搜索了充电和降频的问题，果然很快就找到了一些<a href="https://www.forbes.com/sites/barrycollins/2020/04/24/why-you-shouldnt-charge-your-macbook-pro-from-the-left-hand-side/#15349b4f78ff" target="_blank" rel="noopener">文章</a>。在左侧的 Type-C 接口充电，会导致 MacBook Pro 过热降频。所以，你必须 Charge Your MacBook Pro “Right”。当我把充电线移动到右边后，至少 MacBook Pro 可以不那么卡了。</p><h2 id="风扇转速为什么还是那么高？"><a href="#风扇转速为什么还是那么高？" class="headerlink" title="风扇转速为什么还是那么高？"></a>风扇转速为什么还是那么高？</h2><p>然而在移动了充电线后，CPU 的温度倒是上去了，风扇一直在高负载转动，这也太奇怪了。如果我们在软件或者外设上找不到原因，可能硬件上确实出了问题。于是我先简单把外壳先拆了，发现整个壳子内的灰已经满到结成毛团了。在我用刷子先把壳子里的灰尘和风扇上的灰尘清理后，机器的降频现象得到了改善。</p><p><img src="/static/intel-gadget-1.jpg" alt="Intel Gadget Result 1"></p><h2 id="CPU-满载时为什么还会降频？"><a href="#CPU-满载时为什么还会降频？" class="headerlink" title="CPU 满载时为什么还会降频？"></a>CPU 满载时为什么还会降频？</h2><p>于是我开始对机器进行压力测试。可惜压力测试 5 分钟后， CPU 还是达到 100 摄氏度触发过热降频，虽然频率只会降到 2.2GHz，但我觉得鳍片上没有处理到的灰尘可能是原因。于是我决定给机器来个大扫除，清理灰尘，更换硅脂。</p><p>我打开 ifixit 开始看这台机器的<a href="https://zh.ifixit.com/Guide/MacBook+Pro+15-Inch+Touch+Bar+Late+2016+Thermal+Paste+Replacement/131546?lang=en" target="_blank" rel="noopener">拆解</a>。结果发现这款机器要想更换硅脂，几乎要把所有东西都拆了，要拆掉 114514 个螺丝。我想不行我还是找个店铺来帮我弄吧。于是开始找日本的 Mac 修理的店铺。结果发现光拆机器的手工费就要 15000 日元。看着这个价格，我想我一万上的劳动也能省这 15000 日元吧。</p><p>于是我照着教程一个个把螺丝拆下来。果然鳍片上全是灰尘，而且苹果的这个便宜硅脂也已经发干了。最后我给 CPU 和 GPU 重新上了 MX-4 的硅脂，小心安装回去，一个螺丝也没有多。开机，轻松点亮。</p><h2 id="我的老婆救回来了"><a href="#我的老婆救回来了" class="headerlink" title="我的老婆救回来了"></a>我的老婆救回来了</h2><p>更换完散热的结果如何呢？</p><p><img src="/static/intel-gadget-2.jpg" alt="Intel Gadget Result 2"></p><p>以默认风扇 profile，烤机 2 分钟风扇甚至都不会满载。而强制风扇满载后，CPU 烤机温度也只有 86 摄氏度，不但不降频，甚至还能睿频！至此，我的老婆终于被我抢救了回来，再也不用过着靠插管度日的生活，可以开开心心地安享她的下半生了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;我的老婆不行了&quot;&gt;&lt;a href=&quot;#我的老婆不行了&quot; class=&quot;headerlink&quot; title=&quot;我的老婆不行了&quot;&gt;&lt;/a&gt;我的老婆不行了&lt;/h2&gt;&lt;p&gt;我的 MacBook Pro 15 (late-2016) 真的不行了。&lt;/p&gt;
&lt;p&gt;作为一款 1
      
    
    </summary>
    
    
      <category term="散热" scheme="https://coderemixer.com/tags/%E6%95%A3%E7%83%AD/"/>
    
      <category term="Macbook Pro" scheme="https://coderemixer.com/tags/Macbook-Pro/"/>
    
      <category term="维修" scheme="https://coderemixer.com/tags/%E7%BB%B4%E4%BF%AE/"/>
    
  </entry>
  
  <entry>
    <title>Ruby 3 Fiber 变化前瞻</title>
    <link href="https://coderemixer.com/2020/07/26/whats-new-in-ruby-3-fiber/"/>
    <id>https://coderemixer.com/2020/07/26/whats-new-in-ruby-3-fiber/</id>
    <published>2020-07-26T09:16:43.000Z</published>
    <updated>2020-08-12T09:18:24.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引"><a href="#引" class="headerlink" title="引"></a>引</h2><p>随着 <a href="https://github.com/ruby/ruby/pull/3032" target="_blank" rel="noopener">GitHub #3032</a> 的合并，从 <a href="https://bugs.ruby-lang.org/issues/13618" target="_blank" rel="noopener">Feature #13618</a> 开始的，关于 Ruby Fiber 调度器的讨论取得了实质性的进展。但相关的变化还没有结束。目前正在被讨论与还没有合并的 Issue 还包括 <a href="https://bugs.ruby-lang.org/issues/16786" target="_blank" rel="noopener">Feature #16786</a>、<a href="https://bugs.ruby-lang.org/issues/16792" target="_blank" rel="noopener">Feature #16792</a>。这些 Issue 正在围绕 Ruby Fiber 调度器剩余的一些实现进行讨论，这些围绕着 Fiber 技术展开的对并发的实现，将作为 Ruby 3 并发提升的重要来源之一。</p><p>Ruby 3 Fiber 调度器会给我们带来什么？如何理解 Ruby 3 Fiber 调度器的引入？如何面对 Ruby 3 Fiber 的新变化？本文就此些问题进行一些讨论。</p><h2 id="为什么要有-Fiber？"><a href="#为什么要有-Fiber？" class="headerlink" title="为什么要有 Fiber？"></a>为什么要有 Fiber？</h2><p>现代操作系统一个基本的特性就是允许多任务的执行。这个「多任务」可能是多线程或者多进程系统。对于一个 CPU，一个典型的情况是拥有 8 个左右的核心数，所以理论上只能同时执行 8 个任务。但操作系统同时执行的进程数往往有数千个，并不能「真正」同时运行。而操作系统需要在不同进程中快速切换从而实现多任务的同时运行。</p><p>现代操作系统使用的调度系统称为抢占式调度系统。简单理解，就是任务运行过程中，如果其它任务急需运行，操作系统会强制停止当前任务来执行其它任务。更传统的操作系统会使用协作式多任务（cooperative multitasking）系统来实现。也就是一个正在执行的任务必须主动宣布自己可以暂停运行，系统才会把执行权交给其它任务。Windows 3.1x、Mac OS 9 就是使用该方法进行的任务调度。</p><p>协作式多任务有着显著的优点和缺点。优点是切换的频率减少，执行效率提高了。而缺点是如果有程序发生了死循环或者长时间占用，系统就会陷入卡死，用户体验极差。</p><p>然而不同于操作系统，对于单一程序内，协作式多任务有时会带来更大的好处。由于线程是由操作系统实现和管理的，调度必须依赖操作系统，而一次操作系统的切换会带来很大的耗时。相比操作系统无法确定程序会不会发生<a href="https://zh.wikipedia.org/wiki/%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">死循环</a>，自己的程序内部代码完全是自己控制的，如果发生死循环那必然是自己的代码问题。在自己的程序内实现一个简单的协作式多任务系统来提高并发显然是个好办法。</p><p>而 Ruby 标准库就实现了一个简单的协作式多任务系统，其中的最小的执行单元称为 <code>Fiber</code> 纤程。提供了 <code>resume</code> <code>yield</code> 和 <code>transfer</code> 方法，实现了纤程之间的切换。</p><p>Fiber 的实现很简单，早年 Ruby Fiber 是基于 <code>caller</code>、 <code>callee</code> 来实现的。熟悉 Lisp 语言的，对这两个函数可能是再熟悉不过了。但是对于现在的 Ruby Fiber 实现，主要可以参考 <a href="https://bugs.ruby-lang.org/issues/14739" target="_blank" rel="noopener">Feature #14739</a> 的实现。由于这个代码是多个机器平台的汇编实现（出于性能上的考虑），我们这里以 <code>amd64</code> 平台为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line">##  This file is part of the &quot;Coroutine&quot; project and released under the MIT License.</span><br><span class="line">##</span><br><span class="line">##  Created by Samuel Williams on 10&#x2F;5&#x2F;2018.</span><br><span class="line">##  Copyright, 2018, by Samuel Williams. All rights reserved.</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line"></span><br><span class="line"># For older linkers</span><br><span class="line">.globl _coroutine_transfer</span><br><span class="line">_coroutine_transfer:</span><br><span class="line"></span><br><span class="line">.globl coroutine_transfer</span><br><span class="line">coroutine_transfer:</span><br><span class="line"># Save caller state</span><br><span class="line">pushq %rbp</span><br><span class="line">pushq %rbx</span><br><span class="line">pushq %r12</span><br><span class="line">pushq %r13</span><br><span class="line">pushq %r14</span><br><span class="line">pushq %r15</span><br><span class="line"></span><br><span class="line"># Save caller stack pointer</span><br><span class="line">movq %rsp, (%rdi)</span><br><span class="line"></span><br><span class="line"># Restore callee stack pointer</span><br><span class="line">movq (%rsi), %rsp</span><br><span class="line"></span><br><span class="line"># Restore callee stack</span><br><span class="line">popq %r15</span><br><span class="line">popq %r14</span><br><span class="line">popq %r13</span><br><span class="line">popq %r12</span><br><span class="line">popq %rbx</span><br><span class="line">popq %rbp</span><br><span class="line"></span><br><span class="line"># Put the first argument into the return value</span><br><span class="line">movq %rdi, %rax</span><br><span class="line"></span><br><span class="line"># We pop the return address and jump to it</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>简简单单，非常好理解。<code>amd64</code> 的 callee-saved register 是 <code>%rbx</code> (base pointer), <code>%rbp</code> (frame prointer) 以及 <code>%r12</code> <code>%r13</code> <code>%r14</code> <code>%r15</code>。把这 6 个指针塞入栈，然后把栈指针 <code>%rsp</code> 返回。而还原一个上下文则是把这个栈顶指针找出来，然后依次取出这 6 个指针，就还原了上下文。 </p><h2 id="Fiber-与-I-O"><a href="#Fiber-与-I-O" class="headerlink" title="Fiber 与 I/O"></a>Fiber 与 I/O</h2><p>但是要想让 Fiber 来提升 Web 系统的并发问题，还需要解决一个问题，那就是基于 I/O 的调度。我们清楚地知道，如果我们收到一个连接，在 Web 请求传输完之前，我们的 Ruby 程序什么都不能做，只能干等。而当我们处理完返回结果后，我们还是要干等到数据传输完后才能关闭连接。虽然现代的 <a href="https://github.com/rack/rack" target="_blank" rel="noopener">rack</a> 服务器例如 <a href="https://github.com/puma/puma" target="_blank" rel="noopener">puma</a> 能够异步解决这一问题。但是一旦涉及到 Redis、数据库和文件读写，我们依然逃不开这个问题。这是包括 Rails 在内的 Ruby 几乎所有 Web 框架性能问题的主要原因。</p><p>如果我们能围绕 I/O 设计一个 Fiber 调度器，那么我们就能极大提高 Ruby Web 框架的性能，但是这个问题并不是没有人做过。从早年的 <a href="https://github.com/eventmachine/eventmachine" target="_blank" rel="noopener">EventMachine</a> 到基于 <a href="https://github.com/socketry/nio4r" target="_blank" rel="noopener">nio4r</a> 的 <a href="https://github.com/socketry/async" target="_blank" rel="noopener">async</a>，包括我自己写的 <a href="https://github.com/midori-rb/midori.rb" target="_blank" rel="noopener">midori</a> 内单独实现的调度器 <a href="https://github.com/midori-rb/murasaki" target="_blank" rel="noopener">murasaki</a>，都是相同的原理。虽然这些框架的细节、性能和功能略有不同。</p><p>Ruby 今天 Fiber 自动异步调度仍然没有称为主流的核心原因是社区的分裂。</p><p>这几个开源的调度器都有一些小问题，然而大家的解决方法就是「一言不合，再写一个」。这使得像是 ActiveRecord 之类的常用框架都很难跟进这些快速迭代的调度器。根本方法就是大家合力来维护同一个调度器，让这个调度器进入标准库。这就是 <a href="https://github.com/ruby/ruby/pull/3032" target="_blank" rel="noopener">GitHub #3032</a> 的核心思路。</p><p>Scheduler 主要实现了三个核心的调度形式 <code>scheduler.wait_writable</code> <code>scheduler.wait_readable</code> 和 <code>scheduler.wait_sleep</code>。也就是当 Fiber 需要等待 I/O 完成写入、读取或者需要休眠时，就会主动将工作权让渡出来，交给其它 Fiber。从而实现基于多个 Fiber 的单线程内的并发性能提升。</p><h2 id="目前-Fiber-调度器剩余的问题"><a href="#目前-Fiber-调度器剩余的问题" class="headerlink" title="目前 Fiber 调度器剩余的问题"></a>目前 Fiber 调度器剩余的问题</h2><p>目前 Scheduler 使用 <code>poll</code> 和 <code>select</code> 方法实现 I/O 的多路复用，而未来显然会支持 Linux 上的 <code>epoll</code> 、BSD 上的 <code>kqueue</code>、Windows 上的 <code>iocp</code> 来实现更好的多路复用性能，而无需调整 API。因为以目前 Ruby Scheduler 的 API 定义，是可以兼容这些多路复用方法的。而至于会不会去支持 macOS 的 <code>kqueue</code> 可能就要打个问号了，毕竟 macOS 的多路复用实现太 buggy 了。</p><p>另一个 Ruby 3 Fiber 亟待解决的问题是目前的 <code>Mutex</code> 锁是基于线程的。而对于同一个 Thread 下多个 Fiber 出现的锁竞争，<code>Mutex</code> 会遇到不小的问题。而目前各个已有的框架都是通过元编程在业务上解决的，比如我 <code>midori-contrib</code> 中对 MySQL 的<a href="https://github.com/midori-rb/midori-contrib/blob/master/lib/midori-contrib/sequel/mysql2.rb#L74" target="_blank" rel="noopener">封装</a>就使用了一系列奇技淫巧来避免问题。不过好在 <a href="https://bugs.ruby-lang.org/issues/16792" target="_blank" rel="noopener">Feature #16792</a> 正在针对这一问题提出方案，希望在 Ruby 3 之前能够有比较好的解决。</p><h2 id="如何迎接-Ruby-3-Fiber-的新变化？"><a href="#如何迎接-Ruby-3-Fiber-的新变化？" class="headerlink" title="如何迎接 Ruby 3 Fiber 的新变化？"></a>如何迎接 Ruby 3 Fiber 的新变化？</h2><p>如何你是单纯的 Ruby 高级框架的使用者，那么你几乎什么都不用做。你只需要等着你常用的框架例如 Rails、Sinatra、ActiveRecord、Sequel 更新来支持这一特性，你的 Web 性能就理应会得到质的飞跃。根据我个人的实测，Ruby 的 Web 服务受到 I/O 调度问题而损失的性能高达 80% 到 90%，这意味着随着你使用的库全面支持 Fiber 的自动调度后，性能有望提升 5-10 倍。</p><p>如果你是 Ruby 框架的维护者和贡献者，那么你要做的事情就相对比较多。本来我想在这篇文章中进一步讨论 Fiber 调度器的使用，不过由于 API 还有很大的变化的可能，并且你需要使用 <code>ruby-head</code> 版本才能进行体验，我决定把该内容放在之后的文章里讲。核心的就是要尽快让你的 gem 中涉及底层 I/O 调用、锁实现和计时实现兼容新 Fiber。因为对于一个任务的 I/O 阻塞来说，一处阻塞处处阻塞，良好的性能必须要由完全不阻塞的 I/O 实现才能做到，否则都会受到显著的影响。</p><p>如果你是 Ruby 的贡献者，并且于 Ruby 不需要额外引入类似 <code>async</code> <code>await</code> 的原语而实现 I/O 无痛的性能提升很感兴趣的话，Ruby 3 Fiber 调度器需要做的事情还很多。比如对 <code>epoll</code> <code>kqueue</code> <code>iocp</code> 的支持；比如对 Ruby 2.x 的 backports。请不要害羞，请尽情贡献你的代码吧。</p><h2 id="结"><a href="#结" class="headerlink" title="结"></a>结</h2><p>Ruby 今天 27 岁了，慢慢步入中年。但是我们依然能看到这门步入中年的语言里闪烁着令人激动的新特性的光辉。也许中年危机不单单是中年危机，更是中年转机。而这份转机靠的是我们每一个 Ruby 的使用者、贡献者和宣传者，让更多的程序员开心起来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引&quot;&gt;&lt;a href=&quot;#引&quot; class=&quot;headerlink&quot; title=&quot;引&quot;&gt;&lt;/a&gt;引&lt;/h2&gt;&lt;p&gt;随着 &lt;a href=&quot;https://github.com/ruby/ruby/pull/3032&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="Ruby" scheme="https://coderemixer.com/tags/Ruby/"/>
    
      <category term="Fiber" scheme="https://coderemixer.com/tags/Fiber/"/>
    
  </entry>
  
  <entry>
    <title>BCD、COBOL、千年虫和昭和 100 年问题</title>
    <link href="https://coderemixer.com/2020/05/24/bcd-cobol-showa-100-years-problem/"/>
    <id>https://coderemixer.com/2020/05/24/bcd-cobol-showa-100-years-problem/</id>
    <published>2020-05-24T04:23:23.000Z</published>
    <updated>2020-08-12T09:01:05.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p><a href="https://coderemixer.com/2020/05/22/how-floating-number-caused-strange-earthquake/">上篇文章</a> 里我们讲到了定点数和浮点数的区别，我们认识到这两个数字在精度对待上的差异。但是这两个类型的数字都是二进制数，而有些数字本身就是很难用二进制表达的。</p><p>比如我们有一个十进制数 $0.1234$，要将其转换成二进制。如果我们采用 32 位 IEEE 754，其结果是 $00111101111111001011100100100100$，转换回十进制是 $0.1234000027179718017578125$ 造成了一个 $2.717 \times 10^{-9}$ 的误差。而如果我们定点数，我们先尝试直接转换：</p><p><img src="/static/convert-binary.png" alt="二进制转换"></p><p>我们至少需要一个 503 位的二进制数才能表达到其开始循环的位数。而且这个在十进制中非常容易表达的数字，在二进制中却变成了非常复杂的循环小数。在一些情况下，我们对于数字在十进制下的精度非常敏感（比如银行），在这种情况下我们应该如何处理数字呢？</p><h2 id="BCD-二进码十进数"><a href="#BCD-二进码十进数" class="headerlink" title="BCD (二进码十进数)"></a>BCD (二进码十进数)</h2><p>对于一个 N 位二进制数，我们很容易知道，其能表达的最大数字量是 $2^N$ 个。十进制数的每一位需要能表达 10 个不同的数字。于是我们有方程 $log_{10}2^N = 1, \lceil N \rceil = 4$，我们可以用 4 个二进制数表达 1 个十进制数（忽略多出来的 6 个数字）。也就是如下表的对应关系：</p><table><thead><tr><th>十进制数</th><th>8</th><th>4</th><th>2</th><th>1</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>2</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>3</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>4</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>5</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>6</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>7</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>8</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>9</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>忽略</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>忽略</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>忽略</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td>忽略</td><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>忽略</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>忽略</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>这就是 BCD (二进码十进数) 的核心设计理念。</p><p>BCD 在计算机中的实现历史悠久。在 Intel 1971 年制造的第一块 CPU Intel 4004 中，其计算系统就是围绕 BCD 设计的（用于驱动计算器）。在之后的 Intel 8008 甚至 x86 架构中都被保留了下来。</p><h2 id="COBOL"><a href="#COBOL" class="headerlink" title="COBOL"></a>COBOL</h2><p>如果我们想在高级语言中使用这一特性，COBOL 是一个很常用的选择。COBOL 出现于 1959 年，是世界上最早实施标准化的计算机语言之一。这门语言在当年是大型商业软件的热门语言。COBOL 支持一种数据类型称为 Comp-3 (Computational-3, Packed Decimal, Packed)，即是我们上面所说的 BCD 数字。</p><p>我们来看下面的 COBOL 程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">IDENTIFICATION DIVISION.</span><br><span class="line">PROGRAM-ID. bcd-check.</span><br><span class="line">DATA DIVISION.</span><br><span class="line">WORKING-STORAGE SECTION.</span><br><span class="line">01 A1 PIC 9(1)V9(17) VALUE 0.1.</span><br><span class="line">01 A2 PIC 9(1)V9(17) VALUE 0.2.</span><br><span class="line">01 WR PIC 9(1)V9(30).</span><br><span class="line">PROCEDURE DIVISION.</span><br><span class="line">COMPUTE WR &#x3D; A1 + A2.</span><br><span class="line">IF 0.3 &#x3D; WR THEN</span><br><span class="line">DISPLAY &quot;TRUE&quot;</span><br><span class="line">ELSE</span><br><span class="line">DISPLAY &quot;FALSE&quot;</span><br><span class="line">END-IF.</span><br><span class="line">STOP RUN.</span><br></pre></td></tr></table></figure><p>这个程序会打印 <code>TRUE</code>，也就是 0.1 + 0.2 精确地等于 0.3，采用 BCD 定点数不会像浮点数一样多出一些二进制误差。高级语言有这样的特性支持，底层的 CPU 有对应的 BCD 指令集直接进行计算，这对于开发来说不能说是不完美。</p><p>这使得在开发银行的转账业务之类的时候，可以放心大胆地进行加减了，COBOL 在商业领域大放异彩。</p><h2 id="x86-64"><a href="#x86-64" class="headerlink" title="x86_64"></a>x86_64</h2><p>然而，事情不是一成不变的。</p><p><img src="/static/220px-Logo_AMD64.svg.png" alt="AMD64"></p><p>1999 年 AMD 扩展了 x86 指令集，提出了新的 amd64 指令集。此后的 Intel 也采用了兼容的指令集。家用计算机从此迈入 64 位时代。并且随着 Intel 在服务器市场的发力，x86_64 也大量取代了原先的小型机、中型机市场。</p><p>然而 amd64 真的是 x86 兼容的指令集吗？并不是。比如 BCD 相关的指令就被移除了。BCD 对于现代计算机架构来说过于复杂。而且随着计算机架构的进一步发展，特别是今天的 CPU 大量依靠 SIMD 指令来提高性能，而 BCD 这种无法很好对齐二进制的数据处理方式给 SIMD 带来极大的困难，要想让 BCD 在 CPU 指令级别借尸还魂几乎不可能。</p><p>不过这问题不大，毕竟 COBOL 编译器也有在升级，虽然性能上有一定影响但问题不算太大。</p><h2 id="千年虫和昭和-100-年问题"><a href="#千年虫和昭和-100-年问题" class="headerlink" title="千年虫和昭和 100 年问题"></a>千年虫和昭和 100 年问题</h2><p><img src="/static/reiwa.jpg" alt="令和"></p><p>昭和虽然在 1989 年就结束了，但是昭和魂却仍大量活在日本的银行系统中。计算机内部需要一套稳定的纪年方法。在 8/16 位机年代，内存寸土寸金。一般纪年都是通过两位数字来表示，为了方便输出通常用的也是 BCD 整数。比如 1919 年就记成 19。然而随着 2000 年的到来，99 变成 00，直接一夜回到 100 年以前，会造成大量系统故障。这就是所谓「千年虫问题」。日本工程师在设计系统时考虑到千年虫问题会在 2000 年到来，如果使用昭和纪年法，要到昭和 100 年才会遇到类似问题，将千年虫问题延后了 25 年，到 2025 年才会被触发。</p><p>2025 年就是 5 年后，然而 COBOL 在今天已经是几乎被淘汰的语言了，BCD 在常用 CPU 的指令集中再也找不到了。也就是说当年编译的程序如果没有源码将无法二进制兼容地移到新机器上，更不要说通过二进制修改替换成 32 位或者 64 位 BCD 数来直接避开问题。就算有源码，懂怎么写 COBOL 的人也快变成了珍惜资源。当年决定要用昭和来避开千年虫的人恐怕也早就退休了。</p><p>于是五年后的日本将如何应对昭和 100 年问题，让我们继续看下去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://coderemixer.com/2020/05/22/how-floating-number-caused-str
      
    
    </summary>
    
    
      <category term="日本" scheme="https://coderemixer.com/tags/%E6%97%A5%E6%9C%AC/"/>
    
      <category term="算法" scheme="https://coderemixer.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="COBOL" scheme="https://coderemixer.com/tags/COBOL/"/>
    
      <category term="昭和" scheme="https://coderemixer.com/tags/%E6%98%AD%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>浮点数如何导致了 4.92000008 级地震？</title>
    <link href="https://coderemixer.com/2020/05/22/how-floating-number-caused-strange-earthquake/"/>
    <id>https://coderemixer.com/2020/05/22/how-floating-number-caused-strange-earthquake/</id>
    <published>2020-05-21T16:28:59.000Z</published>
    <updated>2020-08-12T09:01:06.001Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/static/strange-earthquake.png" alt="Strange Earthquake"></p><p>刚收到一个地震速报，说美国发生了一场 M4.92000008 级地震。这个数字实在太过于微妙，我们很少见到精确到小数点后那么多位的地震级数。News Digest 网站迅速删除了这篇报道，并且补上了一篇 M4.9 级的报道。</p><p>然而，这么奇怪的地震级数是怎么发生的？</p><h2 id="计算机如何表达小数？"><a href="#计算机如何表达小数？" class="headerlink" title="计算机如何表达小数？"></a>计算机如何表达小数？</h2><p>要想理解这个问题，我们还是要从计算机表达数字的方法开始说起。如果要在计算机里表达小数，有两个主流方法，定点数和浮点数。</p><p>定点数很好理解，对于一个二进制，我们人为规定其某几位是整数部分，而另外某几位是小数部分。例如我们对于下面一个 8 位无符号的数字，定义第四位是分割点。</p><table><thead><tr><th>$2^3$</th><th>$2^2$</th><th>$2^1$</th><th>$2^0$</th><th>$2^{-1}$</th><th>$2^{-2}$</th><th>$2^{-3}$</th><th>$2^{-4}$</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>那么这么一个 10011001 就代表十进制的 9.5625。</p><p>我们很容易看出，这个数字里能表达的最大的数字是 11111111，即十进制的 15.9375。</p><p>定点数的点点在哪里是非常关键的，如果点在最后，那么其实就只是整数，不能表达小数，但是能表达的数字最大；如果点在太前面，那么虽然表达小数的能力很强，但是却不能表达大数。</p><p>然而浮点数小数点的位置是浮动的。我们可以根据数据的情况来调整浮点的位置。实际的浮点数还有规约和特殊值的问题，不过我们可以暂且简化一下这个问题。</p><p>比如对于下面的一个八位数字。前四位表示指数即 $2^{8-x}$ 次方，后面部分表示小数即 $1+y$。</p><table><thead><tr><th>x</th><th></th><th></th><th></th><th>y</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>我们可以知道，这里 $x = 5, y = 0.5625$，所以结果是 $(1+0.5625) \times 2^{8-5} = 12.5$。这个数字能表达的最大值是</p><table><thead><tr><th>x</th><th></th><th></th><th></th><th>y</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>结果是 $(1+0.9375) \times 2^8 = 496$，比定点数大很多。浮点数在大数字时能显示的位数更多，而在小数时能显示更高的精度，这在我们不确定精度的时候是一个很好的选择。</p><h2 id="浮点数与定点数之争"><a href="#浮点数与定点数之争" class="headerlink" title="浮点数与定点数之争"></a>浮点数与定点数之争</h2><p>这两个方法谁更好，在历史上有过一段时间的争斗。</p><p>一个失败的定点数的应用就是在 Sony PlayStation 游戏机上。Sony PS 的处理器不支持浮点数计算，只支持定点数计算。Sony PS 的定点数是一个 16.16 定点数，即使用一个 32 位的数据结构，将前 16 位表示整数，而后 16 位表示小数。包括 PS 3D 坐标的顶点变换运算也不得不使用这套定点数系统。在表达小数字时计算就会出现精度不足的情况，这使得 PlayStation 在渲染 3D 图形时经常会出现模型抖动的问题。</p><p>在一般的计算中你通常会需要浮点数，因为当数字小的时候我们更关心精度，而大了之后我们更希望能存储大数。所以在大多数编程语言中，都会提供浮点数作为最常用的小数数据类型。不过定点数在一些场合仍在使用，比如说在一些 NPU（Neural-network Processing Unit）处理器中，会使用定点数来消除浮点数导致的精度抖动。而大多数神经网络中都会由于归一化的存在而很好控制住数据的范围，不会出现大数的情况。</p><h2 id="回到-4-92000008-级地震"><a href="#回到-4-92000008-级地震" class="headerlink" title="回到 4.92000008 级地震"></a>回到 4.92000008 级地震</h2><p>我们通常所说的浮点数，指 IEEE 754。即由电机电子工程师学会 (IEEE) 规范的一套浮点数算法。对于一个 32 位（单精度）浮点数，第 1 位表示正负号，后面 8 位表示指数（即 2 的多少次方），然后接下来 23 位是偏正值，并且还对规约、零、无穷、NaN 进行了特别的定义，是目前最常用的浮点数。</p><p>让我们来看看如何用 IEEE 754 浮点数表达 4.92 级地震。</p><p><img src="/static/ieee754-earthquake.png" alt="IEEE 754 Representation of 4.92"></p><p>我们可以看到，表达成二进制后产生了一个 0.0000000762939453125 的误差，也就是变成了 4.9200000762939453125，如果我们精确到小数点后 8 位，就变成了 4.92000008。</p><p>啊，原来不是测了个那么精确的地震，是浮点数弄出了一点误差，而发布的时候忘记精确到小数点后 2 位了啊。</p><h2 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h2><p>那么聪明的你，能告诉我，为什么在很多语言里 0.1 + 0.2 等于 0.30000000000000004 吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/static/strange-earthquake.png&quot; alt=&quot;Strange Earthquake&quot;&gt;&lt;/p&gt;
&lt;p&gt;刚收到一个地震速报，说美国发生了一场 M4.92000008 级地震。这个数字实在太过于微妙，我们很少见到精确到小数点后那么
      
    
    </summary>
    
    
      <category term="算法" scheme="https://coderemixer.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>女朋友问你「我是不是世界上最好看的女人？」怎么办</title>
    <link href="https://coderemixer.com/2020/05/21/whos-the-most-beautiful-woman-in-the-world/"/>
    <id>https://coderemixer.com/2020/05/21/whos-the-most-beautiful-woman-in-the-world/</id>
    <published>2020-05-20T17:07:43.000Z</published>
    <updated>2020-08-12T09:01:06.007Z</updated>
    
    <content type="html"><![CDATA[<p>如果你女朋友问你「我是不是世界上最好看的女人？」 </p><p>错误回答：</p><ol><li>是的。（除非你见过世界上所有女人） </li><li>不是。（会没命） </li><li>我不知道。（太虚伪，你女朋友真的比电视上的明星都好看吗？）</li></ol><p>正确回答：</p><ol><li>我觉得美貌不是一个全序关系 (total order) 或偏序关系 (partially ordered)。</li><li>不小于三个标准差吧。</li></ol><h2 id="「好看」背后的抽象代数"><a href="#「好看」背后的抽象代数" class="headerlink" title="「好看」背后的抽象代数"></a>「好看」背后的抽象代数</h2><h3 id="什么是全序集？"><a href="#什么是全序集？" class="headerlink" title="什么是全序集？"></a>什么是全序集？</h3><p>关于什么是「最好看」，我们需要理解一下序。也就是先定义一下什么是「好看」。如果让我们把好看直接量化成一个数字可能太难了。但是我们通常是可以比较两个人之间谁比较好看的问题的。于是我们可以假设一个二元关系（Binary relation），比如 $\geq$，使得对于一个所有女人的集合 $S$ 中存在某两个元素 $a$ 和 $b$，如果 $a$ 比 $b$ 好看，我们就记作 $a \geq b$。</p><p>全序集有三个性质：</p><ol><li>传递性。即如果 $a \geq b$，且 $b \geq c$，那么蕴含 $a \geq c$。</li><li>反对称性。即如果 $a \geq b$ 且 $b \geq a$，那么 $a = b$。</li><li>完全性。即 $a \geq b$ 与 $b \geq a$ 必有一个成立。</li></ol><p>比如我们的整数就是一个全序集，如果整数的个数是有限个的，那么就会存在一个「最大」的数。好在地球上人类的数量是有限的，那么如果「好看」是一个全序集，那么会存在「最好看」的人（可能不唯一）。</p><h3 id="为什么美貌不太可能是个全序关系？"><a href="#为什么美貌不太可能是个全序关系？" class="headerlink" title="为什么美貌不太可能是个全序关系？"></a>为什么美貌不太可能是个全序关系？</h3><p>如果我们遇到 $a \geq b, b \geq c, c \geq a $ 同时成立。如果根据反对称性和传递性，我们易证三者是一样好看的。但在自然语言中，好看的关系通常是严格的，即 $a \gt b, b \gt c, c \gt a $ 。这样三者的序形成了一个环，而不是链，所以美貌不太可能是个全序关系。</p><h3 id="不是全序一定没有最好看吗？"><a href="#不是全序一定没有最好看吗？" class="headerlink" title="不是全序一定没有最好看吗？"></a>不是全序一定没有最好看吗？</h3><p>在非全序关系中，「最好看」虽然不一定会存在，但也可能会存在。一种常见的可能存在的序是偏序。即不需要满足「完成性」，只需要完成自反性，即 $\forall a \in S, a \geq a$。一个典型的例子就是子集集合包含排序。</p><p> <img src="/static/429px-Hasse_diagram_of_powerset_of_3.svg.png" alt="Hasse diagram of powerset of 3"></p><p>偏序集的特点是可能存在某两者无法比较，也就是可能存在数个无法比较的「最好看」，于是我们无法判断出这些「最好看」里谁是真正的「最」。</p><p>不过美貌的序关系可能也不是偏序，因为我们刚刚遇到了「环」的问题。偏序集同样是无法成环的，其应该是一个有向无环图。一旦成环的位置在「最好看」里，我们也会遇到类似于偏序集无法选出「最好看」的问题。</p><p>于是你可以把这个问题抛回给你女朋友，「怎么证明这个世界上『最好看』是存在的」？</p><h2 id="如果我们假设美貌是全序关系"><a href="#如果我们假设美貌是全序关系" class="headerlink" title="如果我们假设美貌是全序关系"></a>如果我们假设美貌是全序关系</h2><h3 id="如何假设美貌的分布"><a href="#如何假设美貌的分布" class="headerlink" title="如何假设美貌的分布"></a>如何假设美貌的分布</h3><p>即使我们抛开对于「好看」序关系的讨论，假设「好看」是可以被量化的。但是由于我们无法接触到世界上所有的女性，我们只能给出一个估计。而这个估计必须先假设一个统计学分布。考虑到大部分人的长相是平凡的，我觉得我们可以假设是「高斯分布 (Gaussian distribution, 常态分布, 正态分布)」的。所以我们可以给出一个对标准差下限的估计来描述女友的好看程度。</p><p><img src="/static/720px-Normal_Distribution_PDF.svg.png" alt="Normal Distribution"></p><h3 id="三个标准差的美貌有多好看？"><a href="#三个标准差的美貌有多好看？" class="headerlink" title="三个标准差的美貌有多好看？"></a>三个标准差的美貌有多好看？</h3><p>我们在样例答案中描述的「不小于三个标准差吧」即估计女友的好看程度能大于 99.73% 的女性，这应该是一个很高的称赞了，毕竟我们会接触过的女性可能也很难超过 $10^4$ 这个数量级。</p><p><img src="/static/Empirical_Rule.PNG" alt="Empirical Rule"></p><h3 id="「我和迪丽热巴谁好看？」"><a href="#「我和迪丽热巴谁好看？」" class="headerlink" title="「我和迪丽热巴谁好看？」"></a>「我和迪丽热巴谁好看？」</h3><p>使用这一基于正态分布的理论，可以有效扩展到另一个送命题上，即「我和迪丽热巴谁好看？」。</p><p>你可以反问「你觉得迪丽热巴有 4 个 σ 吗？」。</p><p>这个问题不最大的难点在于，很难精确实质上估计 4 个 σ 的可信度。就算是 IQ 测试通常也无法估计到这个级别以上。这个分布基本上是本科线上被清华录取的概率，可能和一大堆明星中出一个超大爆款的概率差不多在一个数量级上。</p><p>我倾向认为迪丽热巴是有的，不过你女朋友如果不是一线艺人且觉得自己也有的话，恐怕是要相当有自信了。</p><h2 id="不是数学没有用，是你不会用"><a href="#不是数学没有用，是你不会用" class="headerlink" title="不是数学没有用，是你不会用"></a>不是数学没有用，是你不会用</h2><p>虽然很多人都认为学数学是没有用的，会一点加减乘除就行。但是在这个例子中，我们通过学习抽象代数和统计学巧妙化解了女友问出的「送命题」。</p><p>虽然我没有女朋友，但是数学理论只要自洽应该就可以。这套自洽的体系对于「真空中的球形女朋友」应该适用。不过我也不做保证，要是你用标准答案失败了，建议你去换个数学更好的女友比较好。</p><p>大家都学会了吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果你女朋友问你「我是不是世界上最好看的女人？」 &lt;/p&gt;
&lt;p&gt;错误回答：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是的。（除非你见过世界上所有女人） &lt;/li&gt;
&lt;li&gt;不是。（会没命） &lt;/li&gt;
&lt;li&gt;我不知道。（太虚伪，你女朋友真的比电视上的明星都好看吗？）&lt;/li&gt;
&lt;/o
      
    
    </summary>
    
    
      <category term="数学" scheme="https://coderemixer.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="情感" scheme="https://coderemixer.com/tags/%E6%83%85%E6%84%9F/"/>
    
      <category term="抽象代数" scheme="https://coderemixer.com/tags/%E6%8A%BD%E8%B1%A1%E4%BB%A3%E6%95%B0/"/>
    
      <category term="集合论" scheme="https://coderemixer.com/tags/%E9%9B%86%E5%90%88%E8%AE%BA/"/>
    
      <category term="统计学" scheme="https://coderemixer.com/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>83 行 Ruby 的蓝调即兴生成器</title>
    <link href="https://coderemixer.com/2020/04/23/auto-blues-generator/"/>
    <id>https://coderemixer.com/2020/04/23/auto-blues-generator/</id>
    <published>2020-04-23T03:02:53.000Z</published>
    <updated>2020-08-12T09:01:05.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="刻板印象的蓝调"><a href="#刻板印象的蓝调" class="headerlink" title="刻板印象的蓝调"></a>刻板印象的蓝调</h2><p>如果让我用代码来生成音乐，我可能优先的类型就是爵士。像是流行音乐，要是来几颗不和谐音，这听起来可就一点都不流行了。但爵士不一样，弹错一次是弹错，如果能连续弹错两次，那就是真正的爵士艺术家了（逃）。但爵士对乐理的要求太高，要想完全靠代码把逻辑理清楚那也不是一件容易的事。一个好的爵士即兴实在是太难了，不过我们可以根据一些刻板印象来做一做。我就想到了十二小节蓝调和声进行以及蓝调音阶，单靠这两个就一下子把需要的伴奏和旋律的模式给提供了一个大概，也许可以试试用代码来自动生成看看。</p><p>合成器方面我用的是 Sonic Pi，一款基于 Ruby 的实时编码音乐合成器。其实我之前用过一两次，也不算太会用这个库，也是突发奇想然后现学的。</p><h2 id="节奏生成"><a href="#节奏生成" class="headerlink" title="节奏生成"></a>节奏生成</h2><p>首先还是要有一个节奏生成器，由于是蓝调音乐，节奏其实可以比较随性。我的基本想法很简单，在给定一个小节里随机填充四分、八分音符。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FOURTH = <span class="number">0</span>.<span class="number">5</span></span><br><span class="line">EIGHTH = FOURTH / <span class="number">2</span></span><br><span class="line">SIXTEENTH = EIGHTH / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_rhythms</span><span class="params">(candidates=[EIGHTH, FOURTH], remaining_time=FOURTH*<span class="number">4</span>)</span></span></span><br><span class="line">  rhythms = []</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> remaining_time &gt; candidates.min</span><br><span class="line">    rhythm = choose(candidates)</span><br><span class="line">    rhythms &lt;&lt; rhythm</span><br><span class="line">    remaining_time -= rhythm</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  rhythms &lt;&lt; remaining_time <span class="keyword">if</span> remaining_time &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  rhythms</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>节奏上想要比较 swing 一点。一个刻板印象的 swing 就是两个八分音符前一拍长一点，后一拍短一点。所以我就在随机填充后在做了一些手动上的修改：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_rhythms</span><span class="params">(candidates=[EIGHTH, FOURTH], remaining_time=FOURTH*<span class="number">4</span>)</span></span></span><br><span class="line">  rhythms = []</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> remaining_time &gt; candidates.min</span><br><span class="line">    rhythm = choose(candidates)</span><br><span class="line">    rhythms &lt;&lt; rhythm</span><br><span class="line">    remaining_time -= rhythm</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  rhythms &lt;&lt; remaining_time <span class="keyword">if</span> remaining_time &gt; <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Generate Swing Pattern</span></span><br><span class="line">  (rhythms.length - <span class="number">1</span>).times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    <span class="keyword">if</span> rhythms[i] == EIGHTH <span class="keyword">and</span> rhythms[i + <span class="number">1</span>] == EIGHTH</span><br><span class="line">      rhythms[i] = EIGHTH + SIXTEENTH</span><br><span class="line">      rhythms[i + <span class="number">1</span>] = EIGHTH - SIXTEENTH</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  rhythms</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>写完节奏，我们写一个测试来听一下。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">live_loop <span class="symbol">:rhythm_test</span> <span class="keyword">do</span></span><br><span class="line">  use_synth <span class="symbol">:pulse</span></span><br><span class="line">  rhythms = generate_rhythms</span><br><span class="line">  rhythms.each <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">    play <span class="symbol">:C3</span>, <span class="symbol">release:</span> t</span><br><span class="line">    sleep t</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>感觉还行。</p><p><audio src="/static/blues-rhythm.mp3" controls></audio></p><h2 id="贝斯"><a href="#贝斯" class="headerlink" title="贝斯"></a>贝斯</h2><p>有了节奏我们接下来就可以写贝斯。<del>贝斯反正很多人听不见，也不用花很大力气写。</del></p><p>十二小节蓝调的和弦基本上就是四个一级，两个四级两个一级，一个五级一个四级再两个一级如此重复。贝斯我的想法就是写一个 walking bass（走路贝斯）。基本上就是第一个音是和弦根音（否则听起来就不像这个和弦了），后面的音就是在九和弦的三度、七度、九度音上随便爬就行。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CHORDS_BASE = [<span class="symbol">:C2</span>, <span class="symbol">:C2</span>, <span class="symbol">:C2</span>, <span class="symbol">:C2</span>, <span class="symbol">:F2</span>, <span class="symbol">:F2</span>, <span class="symbol">:C2</span>, <span class="symbol">:C2</span>, <span class="symbol">:G2</span>, <span class="symbol">:F2</span>, <span class="symbol">:C2</span>, <span class="symbol">:C2</span>]</span><br><span class="line"></span><br><span class="line">live_loop <span class="symbol">:bass_line</span> <span class="keyword">do</span></span><br><span class="line">  use_synth <span class="symbol">:fm</span></span><br><span class="line">  </span><br><span class="line">  CHORDS_BASE.each <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">    notes = chord(c, <span class="string">'9'</span>).to_a</span><br><span class="line">    </span><br><span class="line">    rhythms = generate_rhythms</span><br><span class="line">    </span><br><span class="line">    play notes[<span class="number">0</span>], <span class="symbol">release:</span> rhythms[<span class="number">0</span>]</span><br><span class="line">    sleep rhythms[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    rhythms[<span class="number">1</span>..-<span class="number">1</span>].each <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      play choose([notes[<span class="number">1</span>], notes[<span class="number">3</span>], notes[<span class="number">4</span>]]), <span class="symbol">release:</span> t</span><br><span class="line">      sleep t</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>感觉差不多。</p><p><audio src="/static/blues-bass.mp3" controls></audio></p><h2 id="左手伴奏"><a href="#左手伴奏" class="headerlink" title="左手伴奏"></a>左手伴奏</h2><p>写完了贝斯，最好在高一个八度再写一个左手伴奏，节奏可以和贝斯错开。因为已经有贝斯了，这个伴奏我不想要有和弦根音。然后节奏上希望有一些错落感，不要像 bass 一样从头弹到尾。于是我加了一个随机变量，当到达当前节奏时 50% 演奏和弦，50% 概率直接跳过。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CHORDS_HARMONY = [<span class="symbol">:C3</span>, <span class="symbol">:C3</span>, <span class="symbol">:C3</span>, <span class="symbol">:C3</span>, <span class="symbol">:F3</span>, <span class="symbol">:F3</span>, <span class="symbol">:C3</span>, <span class="symbol">:C3</span>, <span class="symbol">:G3</span>, <span class="symbol">:F3</span>, <span class="symbol">:C3</span>, <span class="symbol">:C3</span>]</span><br><span class="line"></span><br><span class="line">live_loop <span class="symbol">:chord</span> <span class="keyword">do</span></span><br><span class="line">  use_synth <span class="symbol">:fm</span></span><br><span class="line">  </span><br><span class="line">  CHORDS_HARMONY.each <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">    notes = chord(c, <span class="string">'9'</span>).to_a</span><br><span class="line">    rhythms = generate_rhythms</span><br><span class="line">    </span><br><span class="line">    rhythms.each <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      play [notes[<span class="number">1</span>], notes[<span class="number">3</span>], notes[<span class="number">4</span>]], <span class="symbol">release:</span> t <span class="keyword">if</span> choose([<span class="literal">true</span>, <span class="literal">false</span>])</span><br><span class="line">      sleep t</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>听起来是这样的。这蓝调的味道一下子就来了。</p><p><audio src="/static/blues-chords.mp3" controls></audio></p><h2 id="即兴"><a href="#即兴" class="headerlink" title="即兴"></a>即兴</h2><p>布鲁斯的即兴旋律其实和写中国五声音阶的即兴旋律差不多。是一个上上下下的循环，然后在里面再做一些变化。我这里选用的音阶是 C Eb F Gb G Bb 和 C1，然后两个小节一生成。默认根据其在小节中的大概位置生成一个上升或下降的旋律，然后提供一个 offset 从 -2 到 2 之间随机。在原先旋律上加上一个 offset，如果超出了我们的音程就 clip 掉。这样应该就能产生一个整体上有上下，但是实际上又有很多变化的旋律了。</p><p>和贝斯以及和弦不太一样的是，为了有更多的变化感，节奏要从二分、四分、八分、十六分里任意随机。然后被跳过的概率不用 50% 那么大，10% 应该就可以。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">BLUES_SCALE = [<span class="symbol">:C4</span>, <span class="symbol">:Eb4</span>, <span class="symbol">:F4</span>, <span class="symbol">:Gb4</span>, <span class="symbol">:G</span>, <span class="symbol">:Bb4</span>, <span class="symbol">:C5</span>]</span><br><span class="line"></span><br><span class="line">melody_reverse = <span class="literal">false</span></span><br><span class="line">live_loop <span class="symbol">:melody</span> <span class="keyword">do</span></span><br><span class="line">  use_synth <span class="symbol">:beep</span></span><br><span class="line">  </span><br><span class="line">  rhythm = generate_rhythms([FOURTH*<span class="number">2</span>, FOURTH, EIGHTH, SIXTEENTH], remaining_time=FOURTH*<span class="number">8</span>)</span><br><span class="line">  scale_notes = BLUES_SCALE</span><br><span class="line">  scale_notes = scale_notes.reverse <span class="keyword">if</span> melody_reverse</span><br><span class="line">  melody_reverse = !melody_reverse</span><br><span class="line">  </span><br><span class="line">  rhythm.each_with_index <span class="keyword">do</span> <span class="params">|t, i|</span></span><br><span class="line">    offset = choose([-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">    </span><br><span class="line">    new_index = (i.to_f / rhythm.length * scale_notes.length).to_i + offset</span><br><span class="line">    new_index = <span class="number">0</span> <span class="keyword">if</span> new_index &lt; <span class="number">0</span></span><br><span class="line">    new_index = scale_notes.length - <span class="number">1</span> <span class="keyword">if</span> new_index &gt;= scale_notes.length</span><br><span class="line">    </span><br><span class="line">    note = scale_notes[new_index]</span><br><span class="line">    play note, <span class="symbol">release:</span> t <span class="keyword">if</span> rrand(<span class="number">0</span>, <span class="number">1</span>) &lt; <span class="number">0</span>.<span class="number">9</span></span><br><span class="line">    sleep t</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>最后我们得到了这样的成品：</p><p><audio src="/static/blues-generated.mp3" controls></audio></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完整代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">CHORDS_BASE =    [<span class="symbol">:C2</span>, <span class="symbol">:C2</span>, <span class="symbol">:C2</span>, <span class="symbol">:C2</span>, <span class="symbol">:F2</span>, <span class="symbol">:F2</span>, <span class="symbol">:C2</span>, <span class="symbol">:C2</span>, <span class="symbol">:G2</span>, <span class="symbol">:F2</span>, <span class="symbol">:C2</span>, <span class="symbol">:C2</span>]</span><br><span class="line">CHORDS_HARMONY = [<span class="symbol">:C3</span>, <span class="symbol">:C3</span>, <span class="symbol">:C3</span>, <span class="symbol">:C3</span>, <span class="symbol">:F3</span>, <span class="symbol">:F3</span>, <span class="symbol">:C3</span>, <span class="symbol">:C3</span>, <span class="symbol">:G3</span>, <span class="symbol">:F3</span>, <span class="symbol">:C3</span>, <span class="symbol">:C3</span>]</span><br><span class="line">BLUES_SCALE = [<span class="symbol">:C4</span>, <span class="symbol">:Eb4</span>, <span class="symbol">:F4</span>, <span class="symbol">:Gb4</span>, <span class="symbol">:G</span>, <span class="symbol">:Bb4</span>, <span class="symbol">:C5</span>]</span><br><span class="line"></span><br><span class="line">FOURTH = <span class="number">0</span>.<span class="number">5</span></span><br><span class="line">EIGHTH = FOURTH / <span class="number">2</span></span><br><span class="line">SIXTEENTH = EIGHTH / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_rhythms</span><span class="params">(candidates=[EIGHTH, FOURTH], remaining_time=FOURTH*<span class="number">4</span>)</span></span></span><br><span class="line">  rhythms = []</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> remaining_time &gt; candidates.min</span><br><span class="line">    rhythm = choose(candidates)</span><br><span class="line">    rhythms &lt;&lt; rhythm</span><br><span class="line">    remaining_time -= rhythm</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  rhythms &lt;&lt; remaining_time <span class="keyword">if</span> remaining_time &gt; <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Generate Swing Pattern</span></span><br><span class="line">  (rhythms.length - <span class="number">1</span>).times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    <span class="keyword">if</span> rhythms[i] == EIGHTH <span class="keyword">and</span> rhythms[i + <span class="number">1</span>] == EIGHTH</span><br><span class="line">      rhythms[i] = EIGHTH + SIXTEENTH</span><br><span class="line">      rhythms[i + <span class="number">1</span>] = EIGHTH - SIXTEENTH</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  rhythms</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">live_loop <span class="symbol">:bass_line</span> <span class="keyword">do</span></span><br><span class="line">  use_synth <span class="symbol">:fm</span></span><br><span class="line">  </span><br><span class="line">  CHORDS_BASE.each <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">    notes = chord(c, <span class="string">'9'</span>).to_a</span><br><span class="line">    </span><br><span class="line">    rhythms = generate_rhythms</span><br><span class="line">    </span><br><span class="line">    play notes[<span class="number">0</span>], <span class="symbol">release:</span> rhythms[<span class="number">0</span>]</span><br><span class="line">    sleep rhythms[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    rhythms[<span class="number">1</span>..-<span class="number">1</span>].each <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      play choose([notes[<span class="number">1</span>], notes[<span class="number">3</span>], notes[<span class="number">4</span>]]), <span class="symbol">release:</span> t</span><br><span class="line">      sleep t</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">live_loop <span class="symbol">:chord</span> <span class="keyword">do</span></span><br><span class="line">  use_synth <span class="symbol">:fm</span></span><br><span class="line">  </span><br><span class="line">  CHORDS_HARMONY.each <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">    notes = chord(c, <span class="string">'9'</span>).to_a</span><br><span class="line">    rhythms = generate_rhythms</span><br><span class="line">    </span><br><span class="line">    rhythms.each <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      play [notes[<span class="number">1</span>], notes[<span class="number">3</span>], notes[<span class="number">4</span>]], <span class="symbol">release:</span> t <span class="keyword">if</span> choose([<span class="literal">true</span>, <span class="literal">false</span>])</span><br><span class="line">      sleep t</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">melody_reverse = <span class="literal">false</span></span><br><span class="line">live_loop <span class="symbol">:melody</span> <span class="keyword">do</span></span><br><span class="line">  use_synth <span class="symbol">:beep</span></span><br><span class="line">  </span><br><span class="line">  rhythm = generate_rhythms([FOURTH * <span class="number">2</span>, FOURTH, EIGHTH, SIXTEENTH], remaining_time=FOURTH*<span class="number">8</span>)</span><br><span class="line">  scale_notes = BLUES_SCALE</span><br><span class="line">  scale_notes = scale_notes.reverse <span class="keyword">if</span> melody_reverse</span><br><span class="line">  melody_reverse = !melody_reverse</span><br><span class="line">  </span><br><span class="line">  rhythm.each_with_index <span class="keyword">do</span> <span class="params">|t, i|</span></span><br><span class="line">    offset = choose([-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">    </span><br><span class="line">    new_index = (i.to_f / rhythm.length * scale_notes.length).to_i + offset</span><br><span class="line">    new_index = <span class="number">0</span> <span class="keyword">if</span> new_index &lt; <span class="number">0</span></span><br><span class="line">    new_index = scale_notes.length - <span class="number">1</span> <span class="keyword">if</span> new_index &gt;= scale_notes.length</span><br><span class="line">    </span><br><span class="line">    note = scale_notes[new_index]</span><br><span class="line">    play note, <span class="symbol">release:</span> t <span class="keyword">if</span> rrand(<span class="number">0</span>, <span class="number">1</span>) &lt; <span class="number">0</span>.<span class="number">9</span></span><br><span class="line">    sleep t</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>一共 83 行，好像还挺像那么回事的。而且由于是一个 Loop，放着程序可以无穷无尽地生成下去，作为什么免费无版权的背景音乐素材好像还是个挺不错的来源。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;刻板印象的蓝调&quot;&gt;&lt;a href=&quot;#刻板印象的蓝调&quot; class=&quot;headerlink&quot; title=&quot;刻板印象的蓝调&quot;&gt;&lt;/a&gt;刻板印象的蓝调&lt;/h2&gt;&lt;p&gt;如果让我用代码来生成音乐，我可能优先的类型就是爵士。像是流行音乐，要是来几颗不和谐音，这听起来可就一
      
    
    </summary>
    
    
      <category term="音乐" scheme="https://coderemixer.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="Ruby" scheme="https://coderemixer.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>喊麦的音乐性</title>
    <link href="https://coderemixer.com/2020/04/18/musicality-of-hanmai/"/>
    <id>https://coderemixer.com/2020/04/18/musicality-of-hanmai/</id>
    <published>2020-04-18T14:03:04.000Z</published>
    <updated>2020-08-12T09:01:06.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>说实话我对国内的流行音乐非常不熟悉，但最近杨坤批评《惊雷》的事实在是铺天盖地地出现在各种地方，这极大引起了我的好奇。我就去听了一下这首作品，我听完一度不知道怎么评价这个作品。说实话，我个人是一个音感很差的人，我每周都要抽几个小时来迫使自己做一些音感训练和曲式分析的练习。但是我从来没有想过一个作品，可以在 5 秒之内就让我对接下来会发生所有内容在大脑内给出清晰的判断。如果让我给一个主观上的判断说这个东西的音乐性怎么样，我认为真的很差。但是要让我给出理由，其实却并不那么简单。</p><h2 id="什么是音乐性？"><a href="#什么是音乐性？" class="headerlink" title="什么是音乐性？"></a>什么是音乐性？</h2><p>关于音乐性 (musicality) 本身，我们就不能下一个很明确的定义。不过我们可以拆解一下对音乐的理解。基本上如果单从听觉出发（忽略视觉或者舞蹈之类的因素），音乐可以拆解成作曲、编曲、作词这三个部分。其中作曲还可以进一步的拆分出节奏性、调性、和声等一系列的指标。就我们能想出来的指标，《惊雷》的表现，确实都是很烂的。节奏就是全部都在正拍上的规律节奏，没有任何变化；和声非常单一；词基本没有所谓诗性或者哲学性，甚至我都怀疑这是不是一个合法的中文句子；编曲的话主要就一个电音鼓的 loop，一些合成器采样，土嗨特有的反拍贝斯以及一些音效，毫无技术性可言。</p><p>但把这些东西单独列出来，是不是可以直接反推音乐性的高低，我觉得可能是不可以的。比如民谣的节奏也通常是很规律的，某些摇滚和声也是很单一的，流行歌曲的歌词也不一定是有哲学性的，编曲也并不一定要是越复杂越好的。就算我们把这些问题都结合起来，像是一些先锋派作品，甚至是随机音乐、噪音音乐，比如《4 分 33 秒》，我们也可以说它没有节奏，没有和声，没有歌词，没有编曲，但对于《4 分 33 秒》的争议从来不是在这是不是一首缺乏音乐性的作品上。</p><p>如果让我来解释音乐性，那么我认为是借由音乐的载体所能呈现的信息量。在古典音乐里，这种信息量体现在精巧的音乐设计；在爵士里，是高超的和声与节奏技巧；在流行音乐中，是音乐工业丰富技术烘托的氛围；在先锋派作品中，是对音乐调性和本质的拷问。那喊麦所要呈现的音乐信息在哪里？说实话我编不太出来。很多人拿这首作品去和数来宝、和说唱做比较。至少数来宝也有很多韵律上的规则，说唱的节奏性以及基于形式的对社会议题的探讨则更是完全不在一个级别上了。</p><h2 id="音乐体裁与传播载体"><a href="#音乐体裁与传播载体" class="headerlink" title="音乐体裁与传播载体"></a>音乐体裁与传播载体</h2><p>我们换句话说，像杨坤这样从上世纪 90 年代过来的流行音乐人，曾经也是被批判缺乏音乐性的典型。如果我们从今天的角度来审视，当时很多的音乐制作技术放在今天，也可以随随便便来批判技术性上的不足。甚至我之前还点名批评过杨坤在演绎某首作品时表现非常糟糕。但另一种角度上来看，我们的音乐传播载体，其实极大地限制了音乐体裁的发展，从而进一步衍生出这些音乐的创作。像是在夜店中流行的电子舞曲，那些单一的节奏，被滥用的侧链抽吸，其实是为了调动气氛的功能性需要。我很难想象我在家里放这玩意，也很难想象大家在夜店里听舒曼。流行音乐伴随着电视和广播的流行而流行，当我们需要在电视戏剧节目前后放一些主题音乐，如果我们在这里来段爵士，让观众享受于音乐本身高超的和弦技巧，显然不符合我们的需求。这时候曲式结构简单的、朗朗上口的流行音乐就成为了很好的选择。</p><p>如果说是什么让喊麦这样的形式流行的话，可能还是短视频。非常惭愧的是，在我写这文章的时候，我没有用过短视频软件。我对短视频的印象还停留在坐高铁时候可怕的外放，在我记忆里是和小孩的哭声在一个级别的。于是我去下载了一个「抖音」用了十五分钟，我大概理解了这种形式在短视频中特有的效果了。</p><p>首先这些短视频有着和西方上世纪八十年代「音量竞赛 (loudness race)」一样的问题，软件本身不会对所有视频进行一个合适的压限和响度均衡。这音量忽大忽小的。在短时间内，响度更大的音乐让一般听众感觉声音更好听。所以大家就要比大声，比到把动态范围压成一块砖头。我用了十五分钟，我的耳朵已经极度疲惫，实在受不了这玩意了。做长视频的 YouTube 反而在这块做得很好，在连播的时候很少会当心音量本身的问题，从而几乎终结了「音量竞赛」，没想到同样的灾难在大洋彼岸的中国又开打了。</p><p>另一方面，短视频的载体需要让视频在几秒内抓住观众的眼球。因为观众划走这个视频的成本是远远低于其它视频软件的。而这时候这种音量大、节奏猛的东西就有了用武之地。反正一个视频也就几十秒，要想展现什么曲式结构到哪展现啊？你的奏鸣曲连发展部还没写到视频都完了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实对喊麦的音乐性的讨论最后还是归结到了快餐文化上了。说到底，其实喊麦和流行音乐一样，还是以娱乐和商业性主导的东西，只是哪个更重。我觉得娱乐本来没有什么错，但是艺术教育的时候，不要混为一谈就行。都知道吃快餐没有吃营业丰富均衡的食物好，但这就是一种发展趋势。搁以前，知道双缝干涉实验的都能理解量子物理的大概；谁能想到一本小说再加上一系列以讹传讹，十个人里有五六个能和你说只要眼睛盯着双缝看干涉就会消失呢？这到底是物理科普的进步，还是退步呢？</p><p>去掉这些问题，我希望大家最后想一下这样一个主观问题：</p><p>你希不希望你的孩子在幼儿园里学的儿歌都是《方舱医院真神奇》？你希不希望你的孩子从小听的音乐是这样的喊麦？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;说实话我对国内的流行音乐非常不熟悉，但最近杨坤批评《惊雷》的事实在是铺天盖地地出现在各种地方，这极大引起了我的好奇。我就去听了一下这首作品，
      
    
    </summary>
    
    
      <category term="音乐" scheme="https://coderemixer.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>在我完成了「确定申告」后，讲讲日本的官僚</title>
    <link href="https://coderemixer.com/2020/04/16/after-i-did-my-kakuteishinko/"/>
    <id>https://coderemixer.com/2020/04/16/after-i-did-my-kakuteishinko/</id>
    <published>2020-04-16T08:28:03.000Z</published>
    <updated>2020-08-12T09:01:05.997Z</updated>
    
    <content type="html"><![CDATA[<p>我真的某种意义上很佩服日本的 paperwork。我原来以为像中国那么官僚的体制下，每次跑政府办点什么事都累得要命。结果我「确定申告」跑下来，真的见识到了更高水平的官僚，把我深深震撼到了。首先「确定申告」是日本的一个税务制度，用来修正一年的个人所得税情况。每个日本居民都需要在来年 3 月前完成，今年因为 COVID-19 的原因延后到了 4 月。</p><p>之前宣传说日本的确定申告已经可以在电脑上完成，非常方便。但是非常可惜，这是做不到的。因为「确定申告」需要验证个人番号卡。如果你没有去办这张卡，那么你只要拿着你的待办理的编号和密码就能申办。而像我为了方便开住民票把这张卡办下来的，对不起，除非你的电脑有 NFC 的读卡器，否则你根本没有办法在电脑上办理。</p><p>好吧，虽然电脑办不了，手机可以啊，手机天生有 NFC 读卡机啊。在我安装两个国税的 App 和把浏览器换成 Chrome 后，终于可以开始用手机报税了。不过你要小心了，卡读取和验证过程都不能移动卡片，也就是你在不移动你卡片的状态下还要输入密码，一旦中间断开就提示读取失败。好不容易在手机上把申报表格都填好了，然后你要提交的时候，还要用个人番号卡数字签名。然后签名密码和读取密码是不一样的，位数更长，还有英文大小写，你同样要在不移动卡片的情况下输入完这个密码。我前三次没看清要输入的是这个密码，后面发现了，但后面不小心输错了大小写。然后就完美地把我的卡锁掉了，我需要去市役所重新解锁卡片才能继续用个人番号卡申报了。至于在市役所怎么重设密码呢？把新密码写在纸上，让工作人员来帮你重设。真的是「完美」的安全实践。</p><p>既然把我卡片锁了，还有什么别的方法可以替代个人番号卡来完成对身份的校验的呢？答案是印章。虽然我不排斥印章可以作为一个 2FA 的选项。但是在日本印章是有着和签名一样的法律效力的。如果放在 100 年前，这个制度可能可以接受。但是现在印章是可以由全自动 CNC 加工出来的时候，完全没有安全性可言。你拿着印章图片去找一个 CNC 的厂就可以轻松制作出能通过日本印章验证的伪造印章。而我的印章甚至根本没有在市役所登记过，但是这个印章就是可以用来申报税务。</p><p>然后我一开始是按学生打工的税务减免申报的，但是我收入太高，提示我不适用于这个减免了。但是最后寄送材料里还是提示我要寄送证明我是学生的材料，完全搞不懂这是系统的错误，还是我确实要寄送。然后在我把表格准备好印下来，敲上印章，再邮寄到税务局，终于完成了。</p><p>这么想来，日本花了那么大精力推行的个人番号卡有任何用吗？当然有，你邮寄的时候还要记得把个人番号卡复印了一起寄过去，来证明你是你自己。说实话，日本的个人番号卡技术上确实还挺好的，又有 NFC 介面，又可以进行 RSA 签名，应该可以把大多数的 paperwork 给数位化了。就是不知道实际的应用推广怎么做得这么糟糕。</p><p>哦对了，在日本负责数字化的 IT 大臣竹本直一同时还是反对数字化的「日本の印章制度・文化を守る議員連盟」（はんこ議連）的会长。这感觉就像你觉得韩国瑜歧视女性把韩国瑜移送性平会，但是高雄性平会主委就是韩国瑜一样。这不就难怪还是把纸印下来，敲上印章来得方便简单了嘛。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我真的某种意义上很佩服日本的 paperwork。我原来以为像中国那么官僚的体制下，每次跑政府办点什么事都累得要命。结果我「确定申告」跑下来，真的见识到了更高水平的官僚，把我深深震撼到了。首先「确定申告」是日本的一个税务制度，用来修正一年的个人所得税情况。每个日本居民都需要
      
    
    </summary>
    
    
      <category term="日本" scheme="https://coderemixer.com/tags/%E6%97%A5%E6%9C%AC/"/>
    
      <category term="政治" scheme="https://coderemixer.com/tags/%E6%94%BF%E6%B2%BB/"/>
    
      <category term="生活" scheme="https://coderemixer.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>用 Ruby 学习基本乐理（二）：音程</title>
    <link href="https://coderemixer.com/2020/04/11/learn-music-theory-with-ruby-2/"/>
    <id>https://coderemixer.com/2020/04/11/learn-music-theory-with-ruby-2/</id>
    <published>2020-04-11T09:21:06.000Z</published>
    <updated>2020-08-12T09:01:06.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是音程？"><a href="#什么是音程？" class="headerlink" title="什么是音程？"></a>什么是音程？</h2><p>在<a href="/2020/04/11/learn-music-theory-with-ruby-1/">上一篇文章</a>里，我们认识了音高。这相当于学会了怎么数数。学完数数的小朋友就要学习加减法了，而音高之间的加减法就叫音程。说到「音程」，最类似的日常词语是「路程」。路程是两点间的距离，音程也是两个音高之间的距离。描述音程有两种方法，一种简单的，一种常用的。</p><h2 id="音数"><a href="#音数" class="headerlink" title="音数"></a>音数</h2><p>简单的方法就是我们执行数学上的减法运算，也就是所谓「半音数差」。比如 C 和 D 之间隔了 2 个半音。</p><p>我们把上次的代码稍稍改一下就可以计算音数差了。既然是音数就是个减法运算，我们就可以通过在 Ruby 中实现一个减法方法，从而可以实现 Tone 类之间的减法运算。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tone</span></span></span><br><span class="line">  STANDARD_TUNING = <span class="number">440.0</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:frequency</span>, <span class="symbol">:name</span>, <span class="symbol">:offset</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name)</span></span></span><br><span class="line">    @name = name</span><br><span class="line">    @offset = parse_name(name)</span><br><span class="line">    @frequency = frequency_by_offset(@offset)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_name</span><span class="params">(name)</span></span></span><br><span class="line">    raise AugumentError <span class="keyword">unless</span> name.match?(<span class="regexp">/^[CDEFGAB][#,b]*\d$/</span>)</span><br><span class="line">    tone = name[<span class="number">0</span>]</span><br><span class="line">    sharps = name[<span class="number">1</span>...-<span class="number">1</span>]</span><br><span class="line">    range = name[-<span class="number">1</span>].to_i</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Calculate offset</span></span><br><span class="line">    major_scale = [-<span class="number">9</span>, -<span class="number">7</span>, -<span class="number">5</span>, -<span class="number">4</span>, -<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">    offset = major_scale[<span class="string">'CDEFGAB'</span>.index(tone)] + (range - <span class="number">4</span>) * <span class="number">12</span> <span class="comment"># Offset without sharps or flats</span></span><br><span class="line">    </span><br><span class="line">    sharps.chars.each <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">      c == <span class="string">'#'</span> ? offset += <span class="number">1</span> : offset -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    offset</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">frequency_by_offset</span><span class="params">(offset)</span></span></span><br><span class="line">    STANDARD_TUNING * (<span class="number">2.0</span> ** (<span class="number">1.0</span> / <span class="number">12</span>)) ** offset</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">harmonic_series</span><span class="params">(max=Tone.new(<span class="string">'B9'</span>)</span></span>.frequency)</span><br><span class="line">    tones = []</span><br><span class="line">    (<span class="number">2</span>..).each <span class="keyword">do</span> <span class="params">|n|</span></span><br><span class="line">      <span class="keyword">break</span> <span class="keyword">if</span> @frequency * n &gt; max</span><br><span class="line">      tones &lt;&lt; Tone.by_frequency(@frequency * n)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    tones.uniq &#123; <span class="params">|t|</span> t.name &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">-</span><span class="params">(tone)</span></span></span><br><span class="line">    raise TypeError <span class="keyword">unless</span> tone.is_a?(Tone)</span><br><span class="line">    @offset - tone.offset</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line">    ALL_TONES = (<span class="number">0</span>..<span class="number">9</span>).map &#123;<span class="params">|range|</span> [<span class="string">'C'</span>, <span class="string">'C#'</span>, <span class="string">'D'</span>, <span class="string">'D#'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'F#'</span>, <span class="string">'G'</span>, <span class="string">'G#'</span>, <span class="string">'A'</span>, <span class="string">'A#'</span>, <span class="string">'B'</span>].map &#123;<span class="params">|name|</span> <span class="string">"<span class="subst">#&#123;name&#125;</span><span class="subst">#&#123;range&#125;</span>"</span>&#125;&#125;.flatten.map &#123; <span class="params">|name|</span> Tone.new(name) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">by_frequency</span><span class="params">(freq)</span></span></span><br><span class="line">      errs = ALL_TONES.map &#123;<span class="params">|x|</span> (x.frequency - freq).abs &#125;</span><br><span class="line">      ALL_TONES[errs.rindex(errs.min)]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p Tone.new(<span class="string">'C3'</span>) - Tone.new(<span class="string">'D3'</span>) <span class="comment"># =&gt; -2</span></span><br></pre></td></tr></table></figure><p>我们 C3 比 D3 低了 2 个半音，完美。</p><h2 id="音级"><a href="#音级" class="headerlink" title="音级"></a>音级</h2><p>另一种对音程的描述是基于音级的。在上篇文章我们说到过</p><blockquote><p>音高到音名的关系是一对多的，D、C## 可以表示同一个音高（取决于作曲家的具体需求）。</p></blockquote><p>这是因为在乐理中，音高是在某一个音阶（音高的集合）上的概念。当要在具体音符上使用升降记号时，说明是要使用音阶外音。而音阶外音就需要标注是从音阶中哪个音变化过去的。这就是为什么像是 C# 和 Db 在乐理中是两个不同的音。这一点在五线谱上实际上是特别清晰的，但是很多流行音乐或者电子音乐的制作流程已经完全是基于 midi 乐器的。而 midi 乐器只关心实际的频率，通常都是在钢琴卷帘上进行创作的，是完全不区分 C# 与 Db 的，这也是很多流行音乐创作者容易犯的乐理错误。</p><p><img src="/static/f-sharp.jpg" alt="F-Sharp Mistakes Example"></p><p>（这下理解流行乐坛乐理小王子怎么在节目里讲乐理被真音乐学院副教授给骂了吧。）</p><p>但是我们刚刚的基于音数的音程计算方法，完全不能体现出这样的特性。于是我们应该在描述音的距离的时候，要基于音阶上的音，同时也要能给出不少于音数的信息量。描述音阶上的音我们就要引入音级的概念。</p><table><thead><tr><th>音级</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>A</th><th>B</th></tr></thead><tbody><tr><td>C</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>D</td><td>2</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td></tr><tr><td>E</td><td>3</td><td>2</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>F</td><td>4</td><td>3</td><td>2</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>G</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td><td>2</td><td>3</td></tr><tr><td>A</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td><td>2</td></tr><tr><td>B</td><td>7</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td></tr></tbody></table><p>音级是描述音名与音名之间的距离关系，单位是度，这一关系完全忽略升降号。然而比较奇怪的是，相同音是 1 度音，而不是 0 度。换句话说，纯一度是这个音级加法群的单位元，而不是大家熟悉的 0。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interval_number</span><span class="params">(tone)</span></span></span><br><span class="line">  raise TypeError <span class="keyword">unless</span> tone.is_a?(Tone)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">self</span> - tone &gt; <span class="number">0</span></span><br><span class="line">    <span class="string">'CDEFGAB'</span>.index(@name[<span class="number">0</span>]) - <span class="string">'CDEFGAB'</span>.index(tone.name[<span class="number">0</span>]) + (@name[-<span class="number">1</span>].to_i - tone.name[-<span class="number">1</span>].to_i) * <span class="number">7</span> + <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="string">'CDEFGAB'</span>.index(tone.name[<span class="number">0</span>]) - <span class="string">'CDEFGAB'</span>.index(@name[<span class="number">0</span>]) + (tone.name[-<span class="number">1</span>].to_i - @name[-<span class="number">1</span>].to_i) * <span class="number">7</span> + <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p Tone.new(<span class="string">'C3'</span>).interval_number(Tone.new(<span class="string">'D3'</span>)) <span class="comment"># =&gt; 2</span></span><br><span class="line">p Tone.new(<span class="string">'C3'</span>).interval_number(Tone.new(<span class="string">'G2'</span>)) <span class="comment"># =&gt; 4</span></span><br><span class="line">p Tone.new(<span class="string">'C3'</span>).interval_number(Tone.new(<span class="string">'C1'</span>)) <span class="comment"># =&gt; 15</span></span><br></pre></td></tr></table></figure><h2 id="型态"><a href="#型态" class="headerlink" title="型态"></a>型态</h2><p>对于音级的修饰叫「型态」，乐理上有 5 种基本型态：大、小、纯（完全）、增、减。分别用 M, m, P, A, d。其中 1 4 5 8 度用的是增、纯、减这三个词，而 2 3 6 7 度用的是大、小、增、减。在 C 大调上 C D E F G A B C1 与 C 的关系分别是 纯一度 大二度 大三度 纯四度 纯五度 大六度 大七度 纯八度。比大音程小一个半音的叫小音程。比小音程或纯音程小一个半音的叫减音程，而比大音程或纯音程大一个半音的叫增音程。然后更大更小的再前面用倍字修饰。</p><p>所以理论上 C 和 D#### 之间的音程是「倍倍倍增二度」，而频率完全相同的 C 和 F# 则是「增四度」。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interval_type</span><span class="params">(tone)</span></span></span><br><span class="line">  raise TypeError <span class="keyword">unless</span> tone.is_a?(Tone)</span><br><span class="line">  semitones = (<span class="keyword">self</span> - tone).abs % <span class="number">12</span></span><br><span class="line">  number = (interval_number(tone) - <span class="number">1</span>) % <span class="number">7</span> <span class="comment"># Eighth's type is equal to union's.</span></span><br><span class="line">  default_type_semitones = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line">  default_types = <span class="string">%w(P M M P P M M)</span></span><br><span class="line">  delta = semitones - default_type_semitones[number]</span><br><span class="line">  current_type = default_types[number]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">until</span> delta == <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> delta &gt; <span class="number">0</span> <span class="keyword">and</span> (current_type == <span class="string">'P'</span> <span class="keyword">or</span> current_type == <span class="string">'M'</span>)</span><br><span class="line">      delta -= <span class="number">1</span></span><br><span class="line">      current_type = <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">elsif</span> delta &gt; <span class="number">0</span></span><br><span class="line">      delta -= <span class="number">1</span></span><br><span class="line">      current_type = <span class="string">"A<span class="subst">#&#123;current_type&#125;</span>"</span></span><br><span class="line">    <span class="keyword">elsif</span> delta &lt; <span class="number">0</span> <span class="keyword">and</span> (current_type == <span class="string">'P'</span> <span class="keyword">or</span> current_type == <span class="string">'m'</span>)</span><br><span class="line">      delta += <span class="number">1</span></span><br><span class="line">      current_type = <span class="string">"d"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      delta += <span class="number">1</span></span><br><span class="line">      current_type = <span class="string">"d<span class="subst">#&#123;current_type&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  current_type</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p Tone.new(<span class="string">'C3'</span>).interval_type(Tone.new(<span class="string">'D3'</span>)) <span class="comment"># =&gt; "M"</span></span><br><span class="line">p Tone.new(<span class="string">'C3'</span>).interval_type(Tone.new(<span class="string">'G2'</span>)) <span class="comment"># =&gt; "P"</span></span><br><span class="line">p Tone.new(<span class="string">'C3'</span>).interval_type(Tone.new(<span class="string">'C1'</span>)) <span class="comment"># =&gt; "P"</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后我们结合一下这两者：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interval</span><span class="params">(tone)</span></span></span><br><span class="line">  <span class="string">"<span class="subst">#&#123;interval_type(tone)&#125;</span><span class="subst">#&#123;interval_number(tone)&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p Tone.new(<span class="string">'C3'</span>).interval(Tone.new(<span class="string">'D3'</span>)) <span class="comment"># =&gt; "M2"</span></span><br><span class="line">p Tone.new(<span class="string">'C3'</span>).interval(Tone.new(<span class="string">'G2'</span>)) <span class="comment"># =&gt; "P4"</span></span><br><span class="line">p Tone.new(<span class="string">'C3'</span>).interval(Tone.new(<span class="string">'C1'</span>)) <span class="comment"># =&gt; "P15"</span></span><br><span class="line">p Tone.new(<span class="string">'C3'</span>).interval(Tone.new(<span class="string">'D####3'</span>)) <span class="comment"># =&gt; "AAAA2"</span></span><br></pre></td></tr></table></figure><p>至此，我们用 Ruby 处理了乐理中与音程有关的常见问题。让我们对 Ruby 和乐理的熟练程度都进一步提升了。接下来，我会介绍如何进一步用 Ruby 来处理和弦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是音程？&quot;&gt;&lt;a href=&quot;#什么是音程？&quot; class=&quot;headerlink&quot; title=&quot;什么是音程？&quot;&gt;&lt;/a&gt;什么是音程？&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;/2020/04/11/learn-music-theory-with-ruby-1/&quot;
      
    
    </summary>
    
    
      <category term="音乐" scheme="https://coderemixer.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="Ruby" scheme="https://coderemixer.com/tags/Ruby/"/>
    
      <category term="编程" scheme="https://coderemixer.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="乐理" scheme="https://coderemixer.com/tags/%E4%B9%90%E7%90%86/"/>
    
      <category term="教程" scheme="https://coderemixer.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>用 Ruby 学习基本乐理（一）：音高</title>
    <link href="https://coderemixer.com/2020/04/11/learn-music-theory-with-ruby-1/"/>
    <id>https://coderemixer.com/2020/04/11/learn-music-theory-with-ruby-1/</id>
    <published>2020-04-11T05:36:38.000Z</published>
    <updated>2020-08-12T09:01:06.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>音乐很有趣，理解音乐很难。但音乐背后的物理、数学原理并没有那么复杂，此所谓乐理。Ruby 是一门编程语言。编程编的是程序，所谓程序，是计算机执行的指令，是阐明计算过程的方式。我们在此使用 Ruby 语言描述乐理，以简单的例子提高自己对乐理的理解，也可以精进自己的 Ruby 编程技能。</p><h2 id="从基本音高定义开始"><a href="#从基本音高定义开始" class="headerlink" title="从基本音高定义开始"></a>从基本音高定义开始</h2><p>关于音高的基本定义如下：</p><ol><li>标准音高 A4 = 440Hz</li><li>一个八度有 12 个半音：C, C#, D, D#, E, F, F#, G, G#, A, A#, B</li><li>两个八度之间的频率关系差 2 倍</li><li>以十二平均律调音，两个相邻音的频率关系差 $ 2^\frac{1}{12} $ 倍。</li></ol><p>我们先设计一个根据到 A4 半音数量计算音高频率的 Ruby 程序：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STANDARD_TUNING = <span class="number">440.0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">frequency_by_offset</span><span class="params">(offset)</span></span></span><br><span class="line">  STANDARD_TUNING * (<span class="number">2.0</span> ** (<span class="number">1.0</span> / <span class="number">12</span>)) ** offset</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然后我们要解析音名，从而处理到音高的关系。音乐中的音名主要有七个：C、D、E、F、G、A、B，之间关系是大调音阶关系，即全音、全音、半音、全音、全音、全音、半音。但一个八度内半音数量有 12，所以后面可以接升降记号 # 或 b，记号可以叠加。音高到音名的关系是一对多的，D、C## 可以表示同一个音高（取决于作曲家的具体需求）。最后加上一个八度的标记来表示超过一个八度的音，我们可以用一个正则表达式 <code>^[CDEFGAB][#,b]*\d$</code> 来匹配。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tone</span></span></span><br><span class="line">  STANDARD_TUNING = <span class="number">440.0</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:frequency</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name)</span></span></span><br><span class="line">    @name = name</span><br><span class="line">    offset = parse_name(name)</span><br><span class="line">    @frequency = frequency_by_offset(offset)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_name</span><span class="params">(name)</span></span></span><br><span class="line">    raise AugumentError <span class="keyword">unless</span> name.match?(<span class="regexp">/^[CDEFGAB][#,b]*\d$/</span>)</span><br><span class="line">    tone = name[<span class="number">0</span>]</span><br><span class="line">    sharps = name[<span class="number">1</span>...-<span class="number">1</span>]</span><br><span class="line">    range = name[-<span class="number">1</span>].to_i</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Calculate offset</span></span><br><span class="line">    major_scale = [-<span class="number">9</span>, -<span class="number">7</span>, -<span class="number">5</span>, -<span class="number">4</span>, -<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">    offset = major_scale[<span class="string">'CDEFGAB'</span>.index(tone)] + (range - <span class="number">4</span>) * <span class="number">12</span> <span class="comment"># Offset without sharps or flats</span></span><br><span class="line">    sharps.chars.each <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">      c == <span class="string">'#'</span> ? offset += <span class="number">1</span> : offset -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    offset</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">frequency_by_offset</span><span class="params">(offset)</span></span></span><br><span class="line">    STANDARD_TUNING * (<span class="number">2.0</span> ** (<span class="number">1.0</span> / <span class="number">12</span>)) ** offset</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们来验证一下这个程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2.7.0 :070 &gt; Tone.new(&#39;A4&#39;)</span><br><span class="line"> &#x3D;&gt; #&lt;Tone:0x00007f828c865b58 @name&#x3D;&quot;A4&quot;, @frequency&#x3D;440.0&gt;</span><br><span class="line">2.7.0 :071 &gt; Tone.new(&#39;A#5&#39;)</span><br><span class="line"> &#x3D;&gt; #&lt;Tone:0x00007f828c8653b0 @name&#x3D;&quot;A#5&quot;, @frequency&#x3D;932.3275230361803&gt; </span><br><span class="line">2.7.0 :072 &gt; Tone.new(&#39;C3&#39;)</span><br><span class="line"> &#x3D;&gt; #&lt;Tone:0x00007f828c864d48 @name&#x3D;&quot;C3&quot;, @frequency&#x3D;130.8127826502992&gt;</span><br></pre></td></tr></table></figure><p>我们和<a href="https://pages.mtu.edu/~suits/notefreqs.html" target="_blank" rel="noopener">调音网站</a>比对一下结果：</p><table><thead><tr><th>音名</th><th>计算结果</th><th>调音网站标准值</th></tr></thead><tbody><tr><td>A4</td><td>440.00</td><td>440.00</td></tr><tr><td>A#5</td><td>932.328</td><td>932.33</td></tr><tr><td>C3</td><td>130.813</td><td>130.81</td></tr></tbody></table><p>结果基本准确。</p><h2 id="频率反查"><a href="#频率反查" class="headerlink" title="频率反查"></a>频率反查</h2><p>我们根据音名计算除了频率，下一步是要根据频率计算出接近的音名。但是频率是一个浮点数，浮点数不适合直接用等于号比较。在许多计算中，我们会设置一个阈值 $\epsilon$，即计算两个值的差是否小于这个阈值来判断是否相等。但是这个在音乐中是不适合的，因为八度是一个在频率上呈指数增长的东西，于是当音越高，其对阈值越宽容；当音越低，其对阈值越严格。这在和弦上还发展出了「低音程限制」的问题，我们会在之后具体提到。</p><p>在此我们采用一个粗暴搜索的算法来处理，即二分查找算法 (binary search algorithm)。在 Ruby 中，Array 有自带的二分查找实现，我们不妨使用它。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ALL_TONES = (<span class="number">0</span>..<span class="number">9</span>).map &#123;<span class="params">|range|</span> [<span class="string">'C'</span>, <span class="string">'C#'</span>, <span class="string">'D'</span>, <span class="string">'D#'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'F#'</span>, <span class="string">'G'</span>, <span class="string">'G#'</span>, <span class="string">'A'</span>, <span class="string">'A#'</span>, <span class="string">'B'</span>].map &#123;<span class="params">|name|</span> <span class="string">"<span class="subst">#&#123;name&#125;</span><span class="subst">#&#123;range&#125;</span>"</span>&#125;&#125;.flatten.map &#123; <span class="params">|name|</span> Tone.new(name) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_frequency</span><span class="params">(freq)</span></span></span><br><span class="line">  ALL_TONES.bsearch &#123; <span class="params">|x|</span> x.frequency &gt;= freq &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p by_frequency(<span class="number">440</span>) <span class="comment"># =&gt; #&lt;Tone:0x00007f9b62815498 <span class="doctag">@name</span>="A4", <span class="doctag">@frequency</span>=440.0&gt;</span></span><br></pre></td></tr></table></figure><p>我们把这套系统合并到我们的类中，我们可以得到：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tone</span></span></span><br><span class="line">  STANDARD_TUNING = <span class="number">440.0</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:frequency</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name)</span></span></span><br><span class="line">    @name = name</span><br><span class="line">    offset = parse_name(name)</span><br><span class="line">    @frequency = frequency_by_offset(offset)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_name</span><span class="params">(name)</span></span></span><br><span class="line">    raise AugumentError <span class="keyword">unless</span> name.match?(<span class="regexp">/^[CDEFGAB][#,b]*\d$/</span>)</span><br><span class="line">    tone = name[<span class="number">0</span>]</span><br><span class="line">    sharps = name[<span class="number">1</span>...-<span class="number">1</span>]</span><br><span class="line">    range = name[-<span class="number">1</span>].to_i</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Calculate offset</span></span><br><span class="line">    major_scale = [-<span class="number">9</span>, -<span class="number">7</span>, -<span class="number">5</span>, -<span class="number">4</span>, -<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">    offset = major_scale[<span class="string">'CDEFGAB'</span>.index(tone)] + (range - <span class="number">4</span>) * <span class="number">12</span> <span class="comment"># Offset without sharps or flats</span></span><br><span class="line">    </span><br><span class="line">    sharps.chars.each <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">      c == <span class="string">'#'</span> ? offset += <span class="number">1</span> : offset -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    offset</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">frequency_by_offset</span><span class="params">(offset)</span></span></span><br><span class="line">    STANDARD_TUNING * (<span class="number">2.0</span> ** (<span class="number">1.0</span> / <span class="number">12</span>)) ** offset</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line">    ALL_TONES = (<span class="number">0</span>..<span class="number">9</span>).map &#123;<span class="params">|range|</span> [<span class="string">'C'</span>, <span class="string">'C#'</span>, <span class="string">'D'</span>, <span class="string">'D#'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'F#'</span>, <span class="string">'G'</span>, <span class="string">'G#'</span>, <span class="string">'A'</span>, <span class="string">'A#'</span>, <span class="string">'B'</span>].map &#123;<span class="params">|name|</span> <span class="string">"<span class="subst">#&#123;name&#125;</span><span class="subst">#&#123;range&#125;</span>"</span>&#125;&#125;.flatten.map &#123; <span class="params">|name|</span> Tone.new(name) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">by_frequency</span><span class="params">(freq)</span></span></span><br><span class="line">      ALL_TONES.bsearch &#123; <span class="params">|x|</span> x.frequency &gt;= freq &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p Tone.by_frequency(<span class="number">440</span>) <span class="comment"># =&gt; #&lt;Tone:0x00007fb0cd8164a8 <span class="doctag">@name</span>="A4", <span class="doctag">@frequency</span>=440.0&gt;</span></span><br></pre></td></tr></table></figure><h2 id="泛音列"><a href="#泛音列" class="headerlink" title="泛音列"></a>泛音列</h2><p>发声体除了整体振动（基音）以外，还会分段振动。因此除了基础的频率，通常还会产生两倍、三倍、四倍…频率的泛音。站在频率上非常好理解，但是要想记住泛音列的组成音的音名还是挺难记忆的。我们来看看能不能利用我们的音高定义和频率反查系统来自动计算泛音列吧。</p><p>由于理论上泛音列是无穷的，只要是整数倍都可以。所以我们可以利用 Ruby 2.6.0 开始引入的 endless range 特性让代码变得好看一些。由于我们反查的上限是 B9 所以当搜索超过 B9 我们就忽略之后的泛音列。另外在特高频率上，可能多个频率对应的是某同一个音名，所以在计算完，我们可以 <code>uniq</code> 一下。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">harmonic_series</span><span class="params">(max=Tone.new(<span class="string">'B9'</span>)</span></span>.frequency)</span><br><span class="line">  tones = []</span><br><span class="line">  (<span class="number">2</span>..).each <span class="keyword">do</span> <span class="params">|n|</span></span><br><span class="line">    <span class="keyword">break</span> <span class="keyword">if</span> @frequency * n &gt; max</span><br><span class="line">    tones &lt;&lt; Tone.by_frequency(@frequency * n)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  tones.uniq &#123; <span class="params">|t|</span> t.name &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p Tone.new(<span class="string">'C7'</span>).harmonic_series <span class="comment"># =&gt; [#&lt;Tone:0x00007f859703d8c8 <span class="doctag">@name</span>="C8", <span class="doctag">@frequency</span>=4186.009044809585&gt;, #&lt;Tone:0x00007f859700ec80 <span class="doctag">@name</span>="G#8", <span class="doctag">@frequency</span>=6644.875161279136&gt;, #&lt;Tone:0x00007f859700c868 <span class="doctag">@name</span>="C9", <span class="doctag">@frequency</span>=8372.018089619174&gt;, #&lt;Tone:0x00007f85980424a8 <span class="doctag">@name</span>="E9", <span class="doctag">@frequency</span>=10548.081821211863&gt;, #&lt;Tone:0x00007f8598040130 <span class="doctag">@name</span>="G#9", <span class="doctag">@frequency</span>=13289.750322558277&gt;, #&lt;Tone:0x00007f8597063438 <span class="doctag">@name</span>="A#9", <span class="doctag">@frequency</span>=14917.240368578916&gt;]</span></span><br></pre></td></tr></table></figure><p>根据 C 的泛音列表，其前 6 个泛音是 C G C1 E1 G1 Bb1。我们的计算器把其中两个 G 都计算成了 G#。这是因为我们的频率反查器可以接受一定程度的偏高，但不能接受偏低。考虑到我们的搜索范围只有 120 个音，我们其实没有必要将时间复杂度优化到 $O(logn)$，我们大可以使用 $O(n)$ 的复杂度。于是我把频率反查改成了下面的代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_frequency</span><span class="params">(freq)</span></span></span><br><span class="line">  errs = ALL_TONES.map &#123;<span class="params">|x|</span> (x.frequency - freq).abs &#125;</span><br><span class="line">  ALL_TONES[errs.rindex(errs.min)]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>于是我们的泛音列结果变成了：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p Tone.new(<span class="string">'C7'</span>).harmonic_series <span class="comment"># =&gt; [#&lt;Tone:0x00007fc27787a2d0 <span class="doctag">@name</span>="C8", <span class="doctag">@frequency</span>=4186.009044809585&gt;, #&lt;Tone:0x00007fc277878c78 <span class="doctag">@name</span>="G8", <span class="doctag">@frequency</span>=6271.926975708001&gt;, #&lt;Tone:0x00007fc277877850 <span class="doctag">@name</span>="C9", <span class="doctag">@frequency</span>=8372.018089619174&gt;, #&lt;Tone:0x00007fc277876f40 <span class="doctag">@name</span>="E9", <span class="doctag">@frequency</span>=10548.081821211863&gt;, #&lt;Tone:0x00007fc277875960 <span class="doctag">@name</span>="G9", <span class="doctag">@frequency</span>=12543.853951416007&gt;, #&lt;Tone:0x00007fc277874330 <span class="doctag">@name</span>="A#9", <span class="doctag">@frequency</span>=14917.240368578916&gt;]</span></span><br></pre></td></tr></table></figure><p>与泛音表完全一致。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至此，我们用 Ruby 处理了乐理中与音高有关的常见问题。让我们对 Ruby 和乐理的熟练程度都进一步提升了。接下来，我会介绍如何进一步用 Ruby 来处理音程与和弦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;音乐很有趣，理解音乐很难。但音乐背后的物理、数学原理并没有那么复杂，此所谓乐理。Ruby 是一门编程语言。编程编的是程序，所谓程序，是计算机执行的指
      
    
    </summary>
    
    
      <category term="音乐" scheme="https://coderemixer.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="Ruby" scheme="https://coderemixer.com/tags/Ruby/"/>
    
      <category term="编程" scheme="https://coderemixer.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="乐理" scheme="https://coderemixer.com/tags/%E4%B9%90%E7%90%86/"/>
    
      <category term="教程" scheme="https://coderemixer.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>一些关于音乐游戏的想法</title>
    <link href="https://coderemixer.com/2020/04/05/ideas-about-music-game/"/>
    <id>https://coderemixer.com/2020/04/05/ideas-about-music-game/</id>
    <published>2020-04-05T02:14:42.000Z</published>
    <updated>2020-08-12T09:01:06.002Z</updated>
    
    <content type="html"><![CDATA[<p>Stanley Parable 中通过对 Stanley 工作的描写，讽刺了一些电子游戏的本质。「屏幕上让 Stanley 按一个键，Stanley 就按下那个键」许多电子游戏事实上就是如此，本质上就是一些充满了 QTE 的播片。如果延伸到音乐游戏上，事实上就延展出了对于音乐游戏「音乐性 (musicality)」的探讨。</p><p>如果让我找个音乐游戏中最没有音乐性的，应该就是劲舞团（Audition, X-BEAT）。这东西背后放什么音乐和你敲下去什么东西基本没有任何关系，除了你需要在合拍 (multiple-levels) 上敲空格以外。如果我们追溯音乐游戏的早期，其实音乐游戏制作人对于音乐游戏本身的思考其实是很多样的，像是 1996 年发售的 パラッパラッパー 基本上是一个对节奏的 call and response，从最基本的正拍节奏开始，慢慢引入各种复杂的节奏型。同样类型的其实还有 1999 年的 Space Channel 5，这款游戏甚至没有视觉上即将到来音符的任何提示，完全需要依靠听力和对节奏的记忆来完成游戏。不过这些依赖说唱发展的节奏游戏必然逃不开对唱和模仿的形式。设计得更加精妙的类型是节奏天国（リズム天国），通过把各种节奏型转换成一系列小游戏，视觉反馈是滞后的，用户需要在一些简单练习后通过掌握音乐本身的节奏来自行完成对游戏内按键的判断。</p><p>现在比较流行的音乐游戏，主要还是受启发于 1997 年发售的 beatmania 比较大。这类游戏本质上模拟乐器发出声音的节奏，有提前的视觉提示，几乎不会在没有声音的地方按键，相对来说对于节奏感的要求是很低的，上手的难度低。但这类游戏好模仿的一个原因是，简单调整演出和按键方式就可以相对容易做出新游戏，也很容易将现有的歌曲做成游戏内的关卡便于长期运营。增加难度的方法也比较容易，只需要增加音符出现的密度。像是 Space Channel 5 Part 2 最后大决战的演出里搞过一些密集的 16 分音符以外，通常都没有快到按不出来的按键，但是这样的现象在现在的音乐游戏中极其常见。同时，这样游戏也还可以通过提高判定严格程度来提高难度。在节奏天国这样的游戏里，把判定难度放到 10 个 frame 左右大多数人就会很难算准节奏了，而在视觉和听觉实际演奏音符的双重刺激下，经过练习，现代音游里动不动就可以把判定放到 6 个 frame 甚至更低。这也让玩家在通关后的成就感大幅提升。但这样的难度提升其实不是「音乐性」上难度的提升，其实就是单纯「恶心」人而已。当然这里「恶心」不是什么贬义词，我也很吃恶心这套。</p><p>但这类游戏有个问题是，这样的游戏对于音乐的理解是很有问题的。因为音乐中不是这里大声就一定是重拍，这种对于节奏的理解实在太过肤浅，基本就是把人当成背谱机器。这就像我们不能通过科幻小说来学习科学知识。你不能看完大刘的《球形闪电》就真的认为「盯着东西看，波函数会塌缩」。但是音乐本身不是一个艰涩的科学知识，它本来就是充满了人天生的对节奏的内在感受，是一个每个人都能享受的东西。所以我们才已经有一些游戏做到了真正把音乐游戏做成围绕「音乐」本身设计的游戏，而不是一个换了皮的 QTE 游戏。</p><p>但我也很难说这种克服恶心下得到的成就感比较高，还是在游戏后自己感觉到自己对于音乐的理解有提升的这种好奇心带来的成就高。对于我来说，还是后者比较开心，而且后者也更可以做成一个共乐的游戏，而不是在一个音游的小圈子里大家天天在那里埋头背谱练习。只不过我们已经有很多年再也没有类似设计目的的游戏了。虽然这类游戏销量其实也都不低，有好几款都是大卖的爆款。但和那些能提供长期营收的流水音游来说，还是差了点。不知道有没有什么方法可以同时兼顾游戏性和商业性。</p><p>不知道各位游戏制作人有没有什么想法，也算是能了我一个心愿了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Stanley Parable 中通过对 Stanley 工作的描写，讽刺了一些电子游戏的本质。「屏幕上让 Stanley 按一个键，Stanley 就按下那个键」许多电子游戏事实上就是如此，本质上就是一些充满了 QTE 的播片。如果延伸到音乐游戏上，事实上就延展出了对于音
      
    
    </summary>
    
    
      <category term="游戏" scheme="https://coderemixer.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="音乐" scheme="https://coderemixer.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="随笔" scheme="https://coderemixer.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>6 小时重构一个字幕工具</title>
    <link href="https://coderemixer.com/2020/03/15/fast-srt-subtitle/"/>
    <id>https://coderemixer.com/2020/03/15/fast-srt-subtitle/</id>
    <published>2020-03-15T01:20:37.000Z</published>
    <updated>2020-08-12T09:01:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>某位来自伊朗，现居住在加拿大温哥华的翻译人员曾说过：「ass 能解决所有问题，对于我来说。」</p><p><img src="/static/lodz.jpg" alt="lodz"></p><p><a href="http://www.aegisub.org/" target="_blank" rel="noopener">Aegisub</a> 确实是一个非常好用的工具，提供了非常丰富的字幕特效，以及相对高的字幕效率，除了程序很容易崩溃。但对于简单的纯文本字幕，其实流程是可以进一步被优化的。</p><h2 id="字幕流程"><a href="#字幕流程" class="headerlink" title="字幕流程"></a>字幕流程</h2><p>字幕流程其实就三个部分：文字稿整理（听写或翻译）、打轴、校对。我们可以围绕这三个流程来设计一套最简单最高效的工作流。昨天看 <a href="https://www.youtube.com/watch?v=Ath3BX9DBRs" target="_blank" rel="noopener">NiceChord 好和弦</a>的时候发现 wiwi 老师写了个类似想法的工具，主要是围绕提高打轴效率的一套程序。我尝试用了一下这套工具，想法是很好，但这代码是写的有点糟糕，介面也基本没有。</p><p>于是我考虑重构。重构主要目的如下：</p><ul><li>用 Vue.js 实现一套可用的 UI</li><li>默认提供视频的播放控制</li><li>移除运行时的 Node.js 和 http-server 依赖</li><li>基于 File API 读取字幕文件和视频文件</li><li>基于 GitHub Actions 和 GitHub Pages 实现自动部署</li><li>基于 MIT 开源协议</li><li>提供 ESLint 代码风格 Linting</li><li>新增动态响应实现控制</li><li>新增 i18n 支持</li><li>新增字幕的实时预览功能</li><li>新增 SRT 字幕编辑有效性校验</li><li>新增对 WebVTT 格式的支持</li></ul><p>重新实现所有已有功能大约花了 2 小时，加的那堆新功能花了 4 小时。共计 6 小时把事情给搞完了。</p><p><a href="https://srt.coderemixer.com/" target="_blank" rel="noopener">Live Demo</a></p><p><a href="https://github.com/dsh0416/fast-srt-subtitle/" target="_blank" rel="noopener">GitHub Repo</a></p><p><a href="https://github.com/wiwikuan/fast-srt-subtitle/pull/4" target="_blank" rel="noopener">GitHub Pull Request</a></p><h2 id="已知-bug"><a href="#已知-bug" class="headerlink" title="已知 bug"></a>已知 bug</h2><p><del>发现 Firefox 的 CC 字幕 track 不能加载 blob url。这使得实时预览功能在 Firefox 上存在一定的问题，但 Chrome 和 Safari 都没有问题。准备这两天准备一下各种细节情况，向 Mozilla 回报一下。</del> 发现加载后和 Chrome readystate 不一样，强制 show 了一下竟然就好了。</p><p>其实也可以用 Electron 封装一下离线使用。</p><p>美其名曰，统一体验。</p><p>实则内存爆灹。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;某位来自伊朗，现居住在加拿大温哥华的翻译人员曾说过：「ass 能解决所有问题，对于我来说。」&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/stati
      
    
    </summary>
    
    
      <category term="字幕" scheme="https://coderemixer.com/tags/%E5%AD%97%E5%B9%95/"/>
    
      <category term="YouTube" scheme="https://coderemixer.com/tags/YouTube/"/>
    
  </entry>
  
  <entry>
    <title>一天折腾两个散热系统</title>
    <link href="https://coderemixer.com/2020/03/15/one-day-two-fans/"/>
    <id>https://coderemixer.com/2020/03/15/one-day-two-fans/</id>
    <published>2020-03-14T16:55:18.000Z</published>
    <updated>2020-08-12T09:21:34.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我家有两个东西的散热我非常不满意。</p><p>一个是我去年买的 Ryzen 2700x。之前看评测都说自带的风扇就挺好用，但是我实际用下来吵不吵已经不是最大的问题了，随便超频到全核 4.0GHz 就打温度墙重启了。最魔幻的是这风扇上还有个 H/L 拨片。查了一下，调到 H 会提高转速上限。这转速就差把风扇塞进服务器机箱来整个暴力扇起飞了。</p><p>还有一个是我用了 5 年的 PS4，最近玩点新作风扇就狂转。我原来以为是新游戏比较吃性能。但我最近回去玩了《风之旅人》，结果也狂转。我知道这事麻烦了。头几个批次的 PS4 有散热问题会导致芯片损坏无限蓝灯。虽然我这机器三年质保，但我玩的频率低，所以一直没用坏。如果现在坏了，基本就是重新买了。</p><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><p>坊间传闻过段时间各种电脑配件都要涨价，那么就早买早享受吧。散热器我买了 Antec K240 一体化水冷。这个是我 ITX 机箱能放下的最大尺寸了。而 PS4 我估计是硅脂干了，风扇堵了。买了一罐压缩空气和 MX-4 硅脂。MX-4 的纸面数据很好看，热传导率 8.5W/mK，但一直有传闻说干起来很快。不过我觉得应该能撑到我买 PS5 吧。</p><h2 id="搞机箱"><a href="#搞机箱" class="headerlink" title="搞机箱"></a>搞机箱</h2><p>换这个散热器还是非常一波三折的。首先先要把旧的散热器拆下来，结果我这一拔直接把 CPU 粘在散热器上一起拔下来了，把我吓了一大跳，我还以为针脚断在卡座里了。结果上网一搜，都说这是个常见问题，要扭一扭<del>，舔一舔</del>才能取下来。</p><p>第二个遇到的问题是机箱空间。ITX 机箱太小了，除了要把散热器接上，还需要有 RGB 的排线。我原来还非常小心地给 ITX 搞出了背线理线，这次是把几个机箱风扇拆来拆去挪来挪去，忙活了两个小时终于给装上了。</p><p>点亮无法开机，查了一下故障灯是 DRAM 错误。重新插拔后正常开机，但是风扇异响。一个个风扇拔电测试，最后发现某一个机箱风扇轴承里发出了奇怪的噪音。应该机箱风扇是免维护的，轴承是坏了。不过我先试着把轴承密封橡胶圈拆了喷了点 WD-40 进去，结果完美润滑，声音没了，先这样凑活用吧。</p><p><img src="/static/wd40-meme.jpg" alt="WD-40 Meme"></p><h2 id="搞-PS4"><a href="#搞-PS4" class="headerlink" title="搞 PS4"></a>搞 PS4</h2><p>搞完机箱睡不着，就一并把 PS4 也弄了吧。上 YouTube 找了几个 PS4 Teardown 的视频，结果实际拆的时候发现 PS4 早年型号比后面型号还多两个螺丝。还好没有硬拆，卡扣拔不动的时候比较谨慎，多摸了摸，摸到了两个别的拆解视频里没有的螺丝。PS4 主要内部都是 T8 螺丝和十字螺丝。T8 虽然说是个安全螺丝，但对我这种拆惯了各种怪螺丝的人来说已经算是非常常见的螺丝了。</p><p><img src="/static/ps4-cpu.jpg" alt="PS4 CPU"></p><p>拆完发现，CPU/GPU 上的硅脂已经干到直接看得到晶体表面了。还好拆了，不然真的要闯祸。上了新硅脂，把风扇用压缩空气清理了一下。组装回去，可以说 PS4 装回去的体验非常好，在需要安装螺丝的地方都画了箭头，甚至不需要强记那些螺丝的安装顺序。本来还害怕那个静电开关可能会出问题，结果一次正常点亮。玩了 10 分钟《死亡搁浅》，结果风扇几乎没有什么声音？！</p><p>所以 PS4 把保修贴纸贴得那么牢，声称散热是免维护的意思是… 三年去买台新机器的意思？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;我家有两个东西的散热我非常不满意。&lt;/p&gt;
&lt;p&gt;一个是我去年买的 Ryzen 2700x。之前看评测都说自带的风扇就挺好用，但是我实际用下
      
    
    </summary>
    
    
      <category term="游戏" scheme="https://coderemixer.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="散热" scheme="https://coderemixer.com/tags/%E6%95%A3%E7%83%AD/"/>
    
      <category term="PS4" scheme="https://coderemixer.com/tags/PS4/"/>
    
      <category term="维修" scheme="https://coderemixer.com/tags/%E7%BB%B4%E4%BF%AE/"/>
    
  </entry>
  
  <entry>
    <title>「Keyboard Moe」从零开始自制键盘（三）：分区</title>
    <link href="https://coderemixer.com/2020/03/11/moe-keyboard-log-3/"/>
    <id>https://coderemixer.com/2020/03/11/moe-keyboard-log-3/</id>
    <published>2020-03-10T16:48:08.000Z</published>
    <updated>2020-08-12T09:01:06.004Z</updated>
    
    <content type="html"><![CDATA[<p>ESP32 的片上 Flash 应该有 4MB，但是我之前刷入 ROM 的时候，提示可用的空间只有 1280KB，这让我非常困扰。引入一个 BLE 库就已经吃掉了 75% 的 Flash 空间，我一度怀疑我是不是能在有限的空间里完成程序。ESP32 的一个很有意思的特性就是非常容易实现基于 WiFi 的 OTA 固件升级系统。于是我今天研究了一下，结果一研究明白了之前问题的原因，简单来说就是分区表。</p><p>PlatformIO 默认的分区表如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Name,   Type, SubType, Offset,  Size, Flags</span><br><span class="line">nvs,      data, nvs,     0x9000,  0x5000,</span><br><span class="line">otadata,  data, ota,     0xe000,  0x2000,</span><br><span class="line">app0,     app,  ota_0,   0x10000, 0x140000,</span><br><span class="line">app1,     app,  ota_1,   0x150000,0x140000,</span><br><span class="line">spiffs,   data, spiffs,  0x290000,0x170000,</span><br></pre></td></tr></table></figure><p>也就是说，因为要支持 OTA，所以固件被分成了两块，每块 <code>0x140000 bytes</code>，然后他们有一个共享的 spiffs 分区（SPI Flash Filing System），这可以之后被我们用来存储配置文件。既然我觉得不够用，那我还是先来调整一下分区吧，我改过后的分区如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Name,   Type, SubType, Offset,  Size, Flags</span><br><span class="line">nvs,      data, nvs,     0x9000,  0x5000,</span><br><span class="line">otadata,  data, ota,     0xe000,  0x2000,</span><br><span class="line">app0,     app,  ota_0,   0x10000, 0x180000,</span><br><span class="line">app1,     app,  ota_1,   0x190000,0x180000,</span><br><span class="line">spiffs,   data, spiffs,  0x310000,0x90000,</span><br></pre></td></tr></table></figure><p>应该我的配置文件不会超过 576KB，所以给固件的两个分区每个都多分类了 256KB。固件的可用容量扩大到了 1536KB，缓解了燃眉之急。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ESP32 的片上 Flash 应该有 4MB，但是我之前刷入 ROM 的时候，提示可用的空间只有 1280KB，这让我非常困扰。引入一个 BLE 库就已经吃掉了 75% 的 Flash 空间，我一度怀疑我是不是能在有限的空间里完成程序。ESP32 的一个很有意思的特性就是
      
    
    </summary>
    
    
      <category term="键盘" scheme="https://coderemixer.com/tags/%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>「Keyboard Moe」从零开始自制键盘（二）：蓝牙连接与原型键盘矩阵</title>
    <link href="https://coderemixer.com/2020/02/21/moe-keyboard-log-2/"/>
    <id>https://coderemixer.com/2020/02/21/moe-keyboard-log-2/</id>
    <published>2020-02-21T01:03:37.000Z</published>
    <updated>2020-08-12T09:01:06.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情回顾"><a href="#前情回顾" class="headerlink" title="前情回顾"></a>前情回顾</h2><ul><li><a href="https://coderemixer.com/2020/02/16/moe-keyboard-log-1/">「Keyboard Moe」从零开始自制键盘（一）：硬件设计</a></li></ul><h2 id="开发板"><a href="#开发板" class="headerlink" title="开发板"></a>开发板</h2><p>由于之前设计的主控是 ESP-WROOM-32，而且自动刷机口用的 CP210x 芯片。理所当然，开发板就会买 <a href="http://akizukidenshi.com/catalog/g/gM-11819/" target="_blank" rel="noopener">ESP32-DevKitC ESP-WROOM-32</a>。最近日本疫情也是越来越重了，我就从秋月电子通商网站上买了一片。说实话这网站的硬件也不是特别全，如果最后配 BOM 可能还是要亲自去跑秋叶原。ESP32 自己的官方库不是特别好用，好在已经有兼容的 <a href="https://www.arduino.cc/" target="_blank" rel="noopener">Arduino</a> 库。<a href="https://platformio.org/" target="_blank" rel="noopener">PlatformIO</a> 对 ESP32 开发板也做了支持，所以一键就能建出基本的工程结构。</p><h2 id="蓝牙连接"><a href="#蓝牙连接" class="headerlink" title="蓝牙连接"></a>蓝牙连接</h2><p>我对蓝牙一窍不通，就上网参考一下。我上网看了看找到一个 <a href="https://gist.github.com/sabas1080/93115fb66e09c9b40e5857a19f3e7787" target="_blank" rel="noopener">Gist 样例</a>。跑了一下很容易跑通了。比较奇怪的是，一引入蓝牙的协议栈，Flash 就吃掉 73% 了，其它部分程序可能要省着用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Advanced Memory Usage is available via &quot;PlatformIO Home &gt; Project Inspect&quot;</span><br><span class="line">RAM:   [&#x3D;         ]  11.0% (used 35960 bytes from 327680 bytes)</span><br><span class="line">Flash: [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;   ]  73.6% (used 964611 bytes from 1310720 bytes)</span><br></pre></td></tr></table></figure><p>但我不能直接抄这代码，首先这东西是 GNU LGPL 协议的，实在是太污染了。另一个问题是，这个 C++ 代码写得非常不 C++，而且在协议栈上只实现了键盘相关的协议，而我需要同时用 HID 中键盘和鼠标两者的协议。所以我又参考了 ESP32 的另一个<a href="https://github.com/asterics/esp32_mouse_keyboard" target="_blank" rel="noopener">实现</a>，最后还是选择自己重写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// status.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STATUS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STATUS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> bluetoothConnected = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// STATUS_H_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BluetoothService.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BLUETOOTH_SERVICE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLUETOOTH_SERVICE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEDevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEHIDDevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLE2902.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;status.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint8_t</span> HID_REPORT_MAP[] = &#123;</span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x01</span>,  <span class="comment">// Usage Page (Generic Desktop)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x02</span>,  <span class="comment">// Usage (Mouse)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x01</span>,  <span class="comment">// Collection (Application)</span></span><br><span class="line">  <span class="number">0x85</span>, <span class="number">0x01</span>,  <span class="comment">// Report Id (1)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x01</span>,  <span class="comment">//   Usage (Pointer)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x00</span>,  <span class="comment">//   Collection (Physical)</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x09</span>,  <span class="comment">//     Usage Page (Buttons)</span></span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0x01</span>,  <span class="comment">//     Usage Minimum (01) - Button 1</span></span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x03</span>,  <span class="comment">//     Usage Maximum (03) - Button 3</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x00</span>,  <span class="comment">//     Logical Minimum (0)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x01</span>,  <span class="comment">//     Logical Maximum (1)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x01</span>,  <span class="comment">//     Report Size (1)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x03</span>,  <span class="comment">//     Report Count (3)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x02</span>,  <span class="comment">//     Input (Data, Variable, Absolute) - Button states</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x05</span>,  <span class="comment">//     Report Size (5)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x01</span>,  <span class="comment">//     Report Count (1)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x01</span>,  <span class="comment">//     Input (Constant) - Padding or Reserved bits</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x01</span>,  <span class="comment">//     Usage Page (Generic Desktop)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x30</span>,  <span class="comment">//     Usage (X)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x31</span>,  <span class="comment">//     Usage (Y)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x38</span>,  <span class="comment">//     Usage (Wheel)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x81</span>,  <span class="comment">//     Logical Minimum (-127)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x7F</span>,  <span class="comment">//     Logical Maximum (127)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x08</span>,  <span class="comment">//     Report Size (8)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x03</span>,  <span class="comment">//     Report Count (3)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x06</span>,  <span class="comment">//     Input (Data, Variable, Relative) - X &amp; Y coordinate</span></span><br><span class="line">  <span class="number">0xC0</span>,        <span class="comment">//   End Collection</span></span><br><span class="line">  <span class="number">0xC0</span>,        <span class="comment">// End Collection</span></span><br><span class="line"></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x01</span>,  <span class="comment">// Usage Pg (Generic Desktop)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x06</span>,  <span class="comment">// Usage (Keyboard)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x01</span>,  <span class="comment">// Collection: (Application)</span></span><br><span class="line">  <span class="number">0x85</span>, <span class="number">0x02</span>,  <span class="comment">// Report Id (2)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x07</span>,  <span class="comment">//   Usage Pg (Key Codes)</span></span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0xE0</span>,  <span class="comment">//   Usage Min (224)</span></span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0xE7</span>,  <span class="comment">//   Usage Max (231)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x00</span>,  <span class="comment">//   Log Min (0)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x01</span>,  <span class="comment">//   Log Max (1)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//   Modifier byte</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x01</span>,  <span class="comment">//   Report Size (1)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x08</span>,  <span class="comment">//   Report Count (8)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x02</span>,  <span class="comment">//   Input: (Data, Variable, Absolute)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//   Reserved byte</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x01</span>,  <span class="comment">//   Report Count (1)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x08</span>,  <span class="comment">//   Report Size (8)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x01</span>,  <span class="comment">//   Input: (Constant)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//   LED report</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x05</span>,  <span class="comment">//   Report Count (5)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x01</span>,  <span class="comment">//   Report Size (1)</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x08</span>,  <span class="comment">//   Usage Pg (LEDs)</span></span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0x01</span>,  <span class="comment">//   Usage Min (1)</span></span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x05</span>,  <span class="comment">//   Usage Max (5)</span></span><br><span class="line">  <span class="number">0x91</span>, <span class="number">0x02</span>,  <span class="comment">//   Output: (Data, Variable, Absolute)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//   LED report padding</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x01</span>,  <span class="comment">//   Report Count (1)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x03</span>,  <span class="comment">//   Report Size (3)</span></span><br><span class="line">  <span class="number">0x91</span>, <span class="number">0x01</span>,  <span class="comment">//   Output: (Constant)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//   Key arrays (6 bytes)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x06</span>,  <span class="comment">//   Report Count (6)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x08</span>,  <span class="comment">//   Report Size (8)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x00</span>,  <span class="comment">//   Log Min (0)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x65</span>,  <span class="comment">//   Log Max (101)</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x07</span>,  <span class="comment">//   Usage Pg (Key Codes)</span></span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0x00</span>,  <span class="comment">//   Usage Min (0)</span></span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x65</span>,  <span class="comment">//   Usage Max (101)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x00</span>,  <span class="comment">//   Input: (Data, Array)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="number">0xC0</span>,        <span class="comment">// End Collection</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x0C</span>,   <span class="comment">// Usage Pg (Consumer Devices)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x01</span>,   <span class="comment">// Usage (Consumer Control)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x01</span>,   <span class="comment">// Collection (Application)</span></span><br><span class="line">  <span class="number">0x85</span>, <span class="number">0x03</span>,   <span class="comment">// Report Id (3)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x02</span>,   <span class="comment">//   Usage (Numeric Key Pad)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x02</span>,   <span class="comment">//   Collection (Logical)</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x09</span>,   <span class="comment">//     Usage Pg (Button)</span></span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0x01</span>,   <span class="comment">//     Usage Min (Button 1)</span></span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x0A</span>,   <span class="comment">//     Usage Max (Button 10)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x01</span>,   <span class="comment">//     Logical Min (1)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x0A</span>,   <span class="comment">//     Logical Max (10)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x04</span>,   <span class="comment">//     Report Size (4)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x01</span>,   <span class="comment">//     Report Count (1)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x00</span>,   <span class="comment">//     Input (Data, Ary, Abs)</span></span><br><span class="line">  <span class="number">0xC0</span>,         <span class="comment">//   End Collection</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x0C</span>,   <span class="comment">//   Usage Pg (Consumer Devices)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x86</span>,   <span class="comment">//   Usage (Channel)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0xFF</span>,   <span class="comment">//   Logical Min (-1)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x01</span>,   <span class="comment">//   Logical Max (1)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x02</span>,   <span class="comment">//   Report Size (2)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x01</span>,   <span class="comment">//   Report Count (1)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x46</span>,   <span class="comment">//   Input (Data, Var, Rel, Null)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xE9</span>,   <span class="comment">//   Usage (Volume Up)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xEA</span>,   <span class="comment">//   Usage (Volume Down)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x00</span>,   <span class="comment">//   Logical Min (0)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x01</span>,   <span class="comment">//   Report Size (1)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x02</span>,   <span class="comment">//   Report Count (2)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x02</span>,   <span class="comment">//   Input (Data, Var, Abs)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xE2</span>,   <span class="comment">//   Usage (Mute)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x30</span>,   <span class="comment">//   Usage (Power)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x83</span>,   <span class="comment">//   Usage (Recall Last)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x81</span>,   <span class="comment">//   Usage (Assign Selection)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB0</span>,   <span class="comment">//   Usage (Play)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB1</span>,   <span class="comment">//   Usage (Pause)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB2</span>,   <span class="comment">//   Usage (Record)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB3</span>,   <span class="comment">//   Usage (Fast Forward)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB4</span>,   <span class="comment">//   Usage (Rewind)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB5</span>,   <span class="comment">//   Usage (Scan Next)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB6</span>,   <span class="comment">//   Usage (Scan Prev)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB7</span>,   <span class="comment">//   Usage (Stop)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x01</span>,   <span class="comment">//   Logical Min (1)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x0C</span>,   <span class="comment">//   Logical Max (12)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x04</span>,   <span class="comment">//   Report Size (4)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x01</span>,   <span class="comment">//   Report Count (1)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x00</span>,   <span class="comment">//   Input (Data, Ary, Abs)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x80</span>,   <span class="comment">//   Usage (Selection)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x02</span>,   <span class="comment">//   Collection (Logical)</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x09</span>,   <span class="comment">//     Usage Pg (Button)</span></span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0x01</span>,   <span class="comment">//     Usage Min (Button 1)</span></span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x03</span>,   <span class="comment">//     Usage Max (Button 3)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x01</span>,   <span class="comment">//     Logical Min (1)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x03</span>,   <span class="comment">//     Logical Max (3)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x02</span>,   <span class="comment">//     Report Size (2)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x00</span>,   <span class="comment">//     Input (Data, Ary, Abs)</span></span><br><span class="line">  <span class="number">0xC0</span>,           <span class="comment">//   End Collection</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x03</span>,   <span class="comment">//   Input (Const, Var, Abs)</span></span><br><span class="line">  <span class="number">0xC0</span>,            <span class="comment">// End Collection</span></span><br><span class="line">  <span class="number">0x06</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="comment">// Usage Page(Vendor defined)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xA5</span>,       <span class="comment">// Usage(Vendor Defined)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x01</span>,       <span class="comment">// Collection(Application)</span></span><br><span class="line">  <span class="number">0x85</span>, <span class="number">0x04</span>,   <span class="comment">// Report Id (4)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xA6</span>,   <span class="comment">// Usage(Vendor defined)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xA9</span>,   <span class="comment">// Usage(Vendor defined)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x08</span>,   <span class="comment">// Report Size</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x7F</span>,   <span class="comment">// Report Count = 127 Btyes</span></span><br><span class="line">  <span class="number">0x91</span>, <span class="number">0x02</span>,   <span class="comment">// Output(Data, Variable, Absolute)</span></span><br><span class="line">  <span class="number">0xC0</span>,         <span class="comment">// End Collection</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BluetoothService</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  BLEHIDDevice* hid;</span><br><span class="line">  BLEAdvertising *pAdvertising;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  BLECharacteristic* input;</span><br><span class="line">  BLECharacteristic* output;</span><br><span class="line"></span><br><span class="line">  BluetoothService();</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">startAdvertising</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">stopAdvertising</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BluetoothCallbacks</span>:</span> <span class="keyword">public</span> BLEServerCallbacks &#123;</span><br><span class="line">  BluetoothService* service;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onConnect</span><span class="params">(BLEServer* _)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onDisconnect</span><span class="params">(BLEServer* pServer)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  BluetoothCallbacks(BluetoothService* service);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BluetoothOutputCallbacks</span> :</span> <span class="keyword">public</span> BLECharacteristicCallbacks &#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onWrite</span><span class="params">(BLECharacteristic* me)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// BLUETOOTH_SERVICE_H_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BluetoothService.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BLUETOOTH_SERVICE_CPP_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLUETOOTH_SERVICE_CPP_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BluetoothService.h"</span></span></span><br><span class="line"></span><br><span class="line">BluetoothCallbacks::BluetoothCallbacks(BluetoothService* service) &#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BluetoothCallbacks::onConnect(BLEServer* _) &#123;</span><br><span class="line">  BLE2902* desc = (BLE2902*)service-&gt;input-&gt;getDescriptorByUUID(BLEUUID((<span class="keyword">uint16_t</span>)<span class="number">0x2902</span>));</span><br><span class="line">  desc-&gt;setNotifications(<span class="literal">true</span>);</span><br><span class="line">  bluetoothConnected = <span class="literal">true</span>;</span><br><span class="line">  Serial.println(<span class="string">"Bluetooth Connected."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BluetoothCallbacks::onDisconnect(BLEServer* pServer)&#123;</span><br><span class="line">  BLE2902* desc = (BLE2902*)service-&gt;input-&gt;getDescriptorByUUID(BLEUUID((<span class="keyword">uint16_t</span>)<span class="number">0x2902</span>));</span><br><span class="line">  desc-&gt;setNotifications(<span class="literal">false</span>);</span><br><span class="line">  bluetoothConnected = <span class="literal">false</span>;</span><br><span class="line">  Serial.println(<span class="string">"Bluetooth Disconnected."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BluetoothOutputCallbacks::onWrite(BLECharacteristic* me)&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span>* value = (<span class="keyword">uint8_t</span>*)(me-&gt;getValue().c_str());</span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">"special keys: %d\n"</span>, *value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BluetoothService::BluetoothService() &#123;</span><br><span class="line">  BLEDevice::init(<span class="string">"Keyboard Moe"</span>);</span><br><span class="line">  BLEServer *pServer = BLEDevice::createServer();</span><br><span class="line">  pServer-&gt;setCallbacks(<span class="keyword">new</span> BluetoothCallbacks(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  hid = <span class="keyword">new</span> BLEHIDDevice(pServer);</span><br><span class="line">  input = hid-&gt;inputReport(<span class="number">1</span>);</span><br><span class="line">  output = hid-&gt;outputReport(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  output-&gt;setCallbacks(<span class="keyword">new</span> BluetoothOutputCallbacks());</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> manufacturer = <span class="string">"CodeRemixer"</span>;</span><br><span class="line">  hid-&gt;manufacturer()-&gt;setValue(manufacturer);</span><br><span class="line"></span><br><span class="line">  hid-&gt;pnp(<span class="number">0x02</span>, <span class="number">0xe502</span>, <span class="number">0xa111</span>, <span class="number">0x0210</span>);</span><br><span class="line">  BLESecurity *pSecurity = <span class="keyword">new</span> BLESecurity();</span><br><span class="line">  pSecurity-&gt;setAuthenticationMode(ESP_LE_AUTH_BOND);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://www.bluetooth.com/wp-content/uploads/Sitecore-Media-Library/Gatt/Xml/Characteristics/org.bluetooth.characteristic.hid_information.xml</span></span><br><span class="line">  hid-&gt;hidInfo(<span class="number">0x00</span>, <span class="number">0x02</span>);</span><br><span class="line"></span><br><span class="line">  hid-&gt;reportMap((<span class="keyword">uint8_t</span>*)HID_REPORT_MAP, <span class="keyword">sizeof</span>(HID_REPORT_MAP));</span><br><span class="line">  hid-&gt;startServices();</span><br><span class="line"></span><br><span class="line">  pAdvertising = pServer-&gt;getAdvertising();</span><br><span class="line">  pAdvertising-&gt;setAppearance(HID_KEYBOARD);</span><br><span class="line">  pAdvertising-&gt;addServiceUUID(hid-&gt;hidService()-&gt;getUUID());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BluetoothService::startAdvertising() &#123;</span><br><span class="line">  pAdvertising-&gt;start();</span><br><span class="line">  Serial.println(<span class="string">"Advertising Started."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BluetoothService::stopAdvertising() &#123;</span><br><span class="line">  pAdvertising-&gt;stop();</span><br><span class="line">  Serial.println(<span class="string">"Advertising Stopped."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// BLUETOOTH_SERVICE_CPP_</span></span></span><br></pre></td></tr></table></figure><p>写完发现一个奇怪的事情就是蓝牙一连接会把循环阻塞，于是直接用 FreeRTOS 来执行蓝牙代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;status.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BluetoothService.cpp"</span></span></span><br><span class="line"></span><br><span class="line">BluetoothService* bluetoothService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bluetoothServiceProcess</span><span class="params">(<span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">  bluetoothService = <span class="keyword">new</span> BluetoothService();</span><br><span class="line">  bluetoothService-&gt;startAdvertising();</span><br><span class="line">  delay(portMAX_DELAY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.println(<span class="string">"Moe Keyboard is Starting Up..."</span>);</span><br><span class="line"></span><br><span class="line">  xTaskCreate(bluetoothServiceProcess, <span class="string">"bluetooth_server"</span>, <span class="number">20000</span>, <span class="literal">NULL</span>, <span class="number">5</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4x3-键盘矩阵"><a href="#4x3-键盘矩阵" class="headerlink" title="4x3 键盘矩阵"></a>4x3 键盘矩阵</h2><p>接下来就是需要调键盘按键了，一个节省 pin 的典型设计就是键盘矩阵。为了解耦，这里使用的是键盘矩阵套件，等测试通过后才会换成正式的键盘矩阵。我买的是 <a href="http://akizukidenshi.com/catalog/g/gK-12229/" target="_blank" rel="noopener">4x3 键盘矩阵套件</a>。</p><p><img src="/static/keyboard-matrix-kit-1.jpg" alt="Keyboard Matrix"></p><p>买回来花了两个小时自己焊接了起来。比较奇怪的是二极管正负极标注和脚的长度不匹配，吓得我赶紧用万用表出来重新测了一下。</p><p><img src="/static/keyboard-matrix-kit-2.jpg" alt="Keyboard Matrix"></p><p>焊得非常吃力，焊完反应过来，把焊台温度调得太低了…</p><p><img src="/static/keyboard-matrix-kit-3.jpg" alt="Keyboard Matrix"><br><img src="/static/keyboard-matrix-kit-4.png" alt="Keyboard Matrix"></p><h2 id="键盘矩阵扫描"><a href="#键盘矩阵扫描" class="headerlink" title="键盘矩阵扫描"></a>键盘矩阵扫描</h2><p>这个键盘矩阵套件自带上拉电阻，这和最后我的矩阵有一定出入（因为我还要实现灯阵），但程序还是差不多的。</p><p>一开始我选的是 34 35 32 33 25 26 27 这几 pin 来做。结果，写完后发现前两排按键死活不能用。一开始以为自己焊接短路了，用万用表测了半天也没找到短路点。以防万一又重新焊了一遍结果问题依旧。</p><p>最后查了一下发现 GPIO 34 35 36 39 是<a href="https://randomnerdtutorials.com/esp32-pinout-reference-gpios/" target="_blank" rel="noopener">无法作为 output 模式运行</a>的，最后把需要 output 的更换到了 19 18 和 5 上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gpio.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> GPIO_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"KeyCode.cpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint8_t</span> COL_NUM = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint8_t</span> ROW_NUM = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint8_t</span> COL_GPIO[] = &#123;</span><br><span class="line">  <span class="number">19</span>, <span class="number">18</span>, <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint8_t</span> ROW_GPIO[] = &#123;</span><br><span class="line">  <span class="number">33</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> KeyCode* KEYCODE_MAP[] = &#123;</span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x55</span>), <span class="comment">// *</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x5f</span>), <span class="comment">// 7</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x5c</span>), <span class="comment">// 4</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x59</span>), <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x62</span>), <span class="comment">// 0</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x80</span>), <span class="comment">// 8</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x5d</span>), <span class="comment">// 5</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x5a</span>), <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0xcc</span>), <span class="comment">// #</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x61</span>), <span class="comment">// 9</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x5e</span>), <span class="comment">// 6</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x5b</span>), <span class="comment">// 3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> keyStatus[COL_NUM][ROW_NUM] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> keyStatusSaved[COL_NUM][ROW_NUM] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// GPIO_H_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KeyCode.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> KEYCODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYCODE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> KeyType &#123;</span><br><span class="line">  MULTIMEDIA,</span><br><span class="line">  MODIFIER,</span><br><span class="line">  NORMAL,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyCode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  KeyType type;</span><br><span class="line">  <span class="keyword">uint8_t</span> code;</span><br><span class="line"></span><br><span class="line">  KeyCode(KeyType type, <span class="keyword">uint8_t</span> code);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// KEYCODE_H_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KeyCode.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> KEYCODE_CPP_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYCODE_CPP_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"KeyCode.h"</span></span></span><br><span class="line"></span><br><span class="line">KeyCode::KeyCode(KeyType type, <span class="keyword">uint8_t</span> code) &#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;type = type;</span><br><span class="line">  <span class="keyword">this</span>-&gt;code = code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// KEYCODE_CPP_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;status.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gpio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BluetoothService.cpp"</span></span></span><br><span class="line"></span><br><span class="line">BluetoothService* bluetoothService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bluetoothServiceProcess</span><span class="params">(<span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">  bluetoothService = <span class="keyword">new</span> BluetoothService();</span><br><span class="line">  bluetoothService-&gt;startAdvertising();</span><br><span class="line">  delay(portMAX_DELAY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.println(<span class="string">"Moe Keyboard is Starting Up..."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">uint8_t</span> i = <span class="number">0</span>; i &lt; COL_NUM; i++) &#123;</span><br><span class="line">    pinMode(COL_GPIO[i], OUTPUT);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">uint8_t</span> i = <span class="number">0</span>; i &lt; ROW_NUM; i++) &#123;</span><br><span class="line">    pinMode(ROW_GPIO[i], INPUT);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  xTaskCreate(bluetoothServiceProcess, <span class="string">"bluetooth_server"</span>, <span class="number">20000</span>, <span class="literal">NULL</span>, <span class="number">5</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Matrix Scan</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">uint8_t</span> i = <span class="number">0</span>; i &lt; COL_NUM; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">uint8_t</span> j = <span class="number">0</span>; j &lt; COL_NUM; j++)</span><br><span class="line">      i == j ? digitalWrite(COL_GPIO[j], LOW) : digitalWrite(COL_GPIO[j], HIGH);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">uint8_t</span> j = <span class="number">0</span>; j &lt; ROW_NUM; j++) &#123;</span><br><span class="line">      keyStatus[i][j] = !digitalRead(ROW_GPIO[j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Output</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">uint8_t</span> i = <span class="number">0</span>; i &lt; COL_NUM; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">uint8_t</span> j = <span class="number">0</span>; j &lt; ROW_NUM; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (keyStatus[i][j] == <span class="literal">true</span> &amp;&amp; keyStatusSaved[i][j] == <span class="literal">false</span>) &#123;</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">"Key Down: (col: %d, row: %d, code: %d)\n"</span>, i, j, KEYCODE_MAP[i * ROW_NUM + j]-&gt;code);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>  (keyStatus[i][j] == <span class="literal">false</span> &amp;&amp; keyStatusSaved[i][j] == <span class="literal">true</span>) &#123;</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">"Key Up: (col: %d, row: %d, code: %d)\n"</span>, i, j, KEYCODE_MAP[i * ROW_NUM + j]-&gt;code);</span><br><span class="line">      &#125;</span><br><span class="line">      keyStatusSaved[i][j] = keyStatus[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  delay(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/static/matrix-scan.png" alt="Matrix Scan"></p><p>完美。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情回顾&quot;&gt;&lt;a href=&quot;#前情回顾&quot; class=&quot;headerlink&quot; title=&quot;前情回顾&quot;&gt;&lt;/a&gt;前情回顾&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://coderemixer.com/2020/02/16/moe-keyboard
      
    
    </summary>
    
    
      <category term="键盘" scheme="https://coderemixer.com/tags/%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>「Keyboard Moe」从零开始自制键盘（一）：硬件设计</title>
    <link href="https://coderemixer.com/2020/02/16/moe-keyboard-log-1/"/>
    <id>https://coderemixer.com/2020/02/16/moe-keyboard-log-1/</id>
    <published>2020-02-16T06:43:03.000Z</published>
    <updated>2020-08-12T09:01:06.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求探究"><a href="#需求探究" class="headerlink" title="需求探究"></a>需求探究</h2><p>我从去年就考虑做一把自己的键盘。其需要满足下面的需求：</p><ul><li>便携性：提供不少于 70 键的键盘矩阵，支持蓝牙连接。</li><li>电池管理：能够对锂电池进行充放电，并监控电池电量状态。</li><li>接口现代：支持 Type-C 接口，可以自动在蓝牙和 USB HID 模式切换（方便装机等场景）。</li><li>矢量控制：提供一个类似于小红点的推杆，可以临时替代鼠标。</li><li>人体工学布局：由于我的打字键位并不是非常标准，导致现有的人体工学布局用起来非常难受。所以我考虑做一个有两排重复按键的人体工学配列。</li></ul><p>一个简单的想法就是基于开源的 GH60 方案二次开发。我手上有一把白嫖来的 <a href="https://help.ydkb.io/doku.php?id=en:keyboards:chicory" target="_blank" rel="noopener">Chicory</a>，其设计基本还是和 GH60 一致的围绕 Atmega32u4 设计的方案，蓝牙部分再单独连接到 MDBT40 模组（nRF51822）。这个方案的优缺点很明显，优点是可以很好沿用 AVR 相关的软件栈（特别是 <a href="https://github.com/tmk/tmk_keyboard" target="_blank" rel="noopener">tmk_keyboard</a>）。缺点方面一个是贵，官方套件卖到了 120 美金，光 MDBT40-256RV3 模组就要 7 美金；另一方面 GH60 方案已经几乎把 Atmega32u4 的 I/O 口用完了，要想再加一些我上面的那些功能就很困难。</p><p>于是本着吃螃蟹的想法，我决定自己设计一个键盘方案出来。我自己没有专业学习过模拟电路、数字电路，所以也是一遍做一遍学，折腾了大半个月，在去年的 9 月左右进行了第一次的打样。打样的结果非常失败，由于一些设计缺陷，导致最后连上电都存在问题。</p><p><img src="/static/pcb-moe-legacy.jpg" alt="第一版设计图"></p><p>芯片方案这边选的是 ESP32，虽然这芯片本职是做 WiFi 的，但是作为蓝牙芯片也是非常便宜的。但是 ESP32 不支持 USB 主控，于是最后又迫不得已加了 Atmega32u4 来做 USB 主控。实际拿到生产的板子发现，USB Type-C 接口沉板没做，硬飞上去发现 CC 没有接下拉电阻导致识别也有问题。在我的设计中，ESP32 芯片的固件会由 Atmega32u4 刷入，光整明白这个刷机流程就非常困难。耦合度太高，导致调试非常困难，光布线就遇到很多难题，最后 PCB 弄了四层板进一步提高了生产成本。最后 BOM 单下来，一片得有个好几百。就算不考虑钱的问题，这键盘的尺寸很尴尬，上面一堆贴片件，开钢网又特别大，焊一次就得一天，一直试错下去也不是个办法。</p><h2 id="Moe-Modular-Open-Ergonomics"><a href="#Moe-Modular-Open-Ergonomics" class="headerlink" title="Moe (Modular Open Ergonomics)"></a>Moe (Modular Open Ergonomics)</h2><p>在第一次失败后，我就考虑把设计拆成两个部分，进行模块化设计。</p><p>一个是具备所有逻辑功能的核心板 (moe-core) 和键盘矩阵灯阵板 (moe-71)。核心板包括电源管理、蓝牙管理、USB 管理、固件管理等所有功能，通过一个 FPC 连接器连接到矩阵板上。这样我可以先优先调试核心板，在面包板上随便搭个矩阵就能调试。FPC 提供 1A 的 5V、800mA 的 3.3V、800mA 的 GND 以及 4 个 ADC pin（用来做小红点推杆），剩下的就是一个 20 个键盘矩阵（默认配置 15x5）。所以也方便之后出不同配列的键盘，只需要换个矩阵板就行，不需要再画那堆复杂的逻辑功能。新的 MCU 选型还是 ESP32，但是去掉了 Atmega32u4。</p><p>Atmega32u4 首先不便宜，对于那个性能来说，非常划不来。相反，我上了一片 <a href="http://www.wch.cn/products/CH9329.html" target="_blank" rel="noopener">CH9329</a>，芯片内已经做好了 HID 鼠标和键盘的封装，BOM 成本只有 3.8 元一片，非常划算。</p><p>另外还给这次的板子加上了一片 <a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="noopener">CP2102</a>，从而提供了板上的 USB 刷机口，即插即刷。还有一点吸取教训的，就是在一些辅助功能上都加了一个 0 Ohm 的贴片电阻。如果测试下来硬件上有问题，可以直接把电阻撬了，也不影响其它功能的调试。</p><p>电源方面基本就找了个充电宝的外围芯片 IP5206，能做到 1.5A 充电和 2A 放电，还自带电量查询和手电筒功能（虽然被我串了个电容禁用了，应该没有人想要把键盘当手电筒用）。出来后接到 LDO 上，做一个 3.3V 1A 的输出。</p><p>最后设计出来的核心板的尺寸是 14cm x 3cm。如果使用 <a href="https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF5340" target="_blank" rel="noopener">nRF5340</a> 的方案应该尺寸能进一步减少，还能用上蓝牙 5.1 的新特性。就是 nRF5340 太贵，而且模块难买（业余项目没有精力去调射频参数）就放弃了。</p><p>花了一上午来布线，最后折腾来折腾去，把布线控制在了两层板里，于是不需要用到四层板进一步降低了成本。最后合算下来的 BOM 成本在每套 45 元，加上板子和 SMT 的钱，核心板套件的成本在 65 元以内。比 Chicory 功能更丰富，加上配列板的推荐成本还是能控制在 90 元以内，还是颇有价格优势的。</p><p><img src="/static/moe-core-feb.png" alt="电路图"></p><p><img src="/static/pcb-moe-feb-a.png" alt="正面"></p><p><img src="/static/pcb-moe-feb-b.png" alt="背面"></p><p>工程（MIT 协议）：<a href="https://oshwhub.com/dsh0416/moe-core" target="_blank" rel="noopener">https://oshwhub.com/dsh0416/moe-core</a></p><h2 id="挖坑"><a href="#挖坑" class="headerlink" title="挖坑"></a>挖坑</h2><p>等疫情过去了流出来调试。</p><ul><li>2019.2.17 更新，加了一个退耦电容以防万一。修正了螺丝孔位的位置，并使固定螺丝焊盘接地。</li><li>2019.2.18 更新，修改了三个肖特基二极管以支持充电电压。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求探究&quot;&gt;&lt;a href=&quot;#需求探究&quot; class=&quot;headerlink&quot; title=&quot;需求探究&quot;&gt;&lt;/a&gt;需求探究&lt;/h2&gt;&lt;p&gt;我从去年就考虑做一把自己的键盘。其需要满足下面的需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;便携性：提供不少于 70 键的键盘矩阵，支
      
    
    </summary>
    
    
      <category term="键盘" scheme="https://coderemixer.com/tags/%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>硬核解谜 Prolog 入门 —— 13 Archetypes: Skeptic</title>
    <link href="https://coderemixer.com/2020/01/18/archetypes-skeptic/"/>
    <id>https://coderemixer.com/2020/01/18/archetypes-skeptic/</id>
    <published>2020-01-18T13:29:29.000Z</published>
    <updated>2020-08-12T09:01:05.999Z</updated>
    
    <content type="html"><![CDATA[<p>13 Archetypes: Skeptic 的谜题由三个单独的谜题组成。这三个谜题唯一的共同点就是，它们都有一个错误。</p><p><img src="/static/archetypes-skeptic.jpg" alt="13 Archetypes: Skeptic"></p><p>第二个谜题是「数迷」，第三个就是个数学的填字游戏（crossword），其实没什么好讲的，我们来好好讲一下第一个谜题。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>第一个谜题是一个可以完全用一阶谓词逻辑来描述的问题，也就是使用「断言」「量化」和命题的组合来描述。</p><p>上了一年我们学校萩野達也教授的计算理论 + 逻辑课。萩野教授是日本研究第五代计算机时候成长出来的计算机科学家，数学基础异常过硬，和现在天天写 JavaScript、Python 还叫苦不迭的这些 CS 学生完全不在一个级别上。</p><p>上了萩野一年课之后，我觉得我翅膀也硬了。既然这玩意可以用一阶谓词逻辑来描述，那么应该可以用 Prolog 来解决。第一个题目因为答案选项里有 E、1、3、A、R，因为 13 Archetypes 所有题目都以 13AR 结束，所以显然根本不用看题就知道答案是 E13AR。但如果仔仔细细做一做的话你会发现，其实 10 分钟也做完了。</p><p>但是我不管，我就要用 Prolog 来解决，重现一下上世纪 90 年代人工智能研究的荣耀。</p><h2 id="Prolog-是什么？"><a href="#Prolog-是什么？" class="headerlink" title="Prolog 是什么？"></a>Prolog 是什么？</h2><p>Prolog 是 Programming in Logic 的缩写。Prolog 程序基于一阶谓词逻辑理论。基本就是描述逻辑，然后让 Prolog 解释器来求解。我这里使用的 Prolog 解释器是 SWI-Prolog。SWI-Prolog 是一个从 1987 年开始开发的自由的 Prolog 解释器。我毕竟也不是 Prolog 语言的专家，对我来说找个开源软件临时用一下就行了。</p><p>Prolog 的语法非常简单，几分钟就上手了。Prolog 里大写开头的字母就是变量，其他的就是常量，每个语句必须以句号结尾。第一步是描述事实，比如 Alice 是一个人：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">human(alice).</span><br></pre></td></tr></table></figure><p>事实可以是一个常量的事实，也可以是多个常量之间的，比如 Alice 喜欢 Bob：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">likes(alice, bob).</span><br></pre></td></tr></table></figure><p>然后就是推理关系。符号是 <code>:-</code> ，符号后面的如果成立，那么符号前面的也会成立，比如两个人互相喜欢，那么他们就是朋友：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">friend(<span class="symbol">X</span>, <span class="symbol">Y</span>) :-</span><br><span class="line">likes(<span class="symbol">X</span>, <span class="symbol">Y</span>),</span><br><span class="line">likes(<span class="symbol">Y</span>, <span class="symbol">X</span>).</span><br></pre></td></tr></table></figure><p>其中 <code>,</code> 逗号表示「且 (and)」，如果是「或 (or)」那么就是 <code>;</code> 分号。然后 <code>\+</code> 表示否，最后还可以用 <code>()</code> 来组合它们，基本上这就是基本逻辑了。</p><p>比如冬马喜欢春希，雪菜喜欢冬马和春希，春希没有去音乐会。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">human(haruki).</span><br><span class="line">human(touma).</span><br><span class="line">human(setsuna).</span><br><span class="line"></span><br><span class="line">likes(touma, haruki).</span><br><span class="line">likes(setsuna, haruki).</span><br><span class="line">likes(setsuna, touma).</span><br><span class="line"></span><br><span class="line">friend(<span class="symbol">X</span>, <span class="symbol">Y</span>) :-</span><br><span class="line">human(<span class="symbol">X</span>),</span><br><span class="line">human(<span class="symbol">Y</span>),</span><br><span class="line">likes(<span class="symbol">X</span>, <span class="symbol">Y</span>),</span><br><span class="line">likes(<span class="symbol">Y</span>, <span class="symbol">X</span>).</span><br></pre></td></tr></table></figure><p>然后我们用 SWI-Prolog 加载这个程序，来看看他们之间谁是朋友。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❯ swipl white.pl</span><br><span class="line">Welcome to SWI-Prolog (threaded, 64 bits, version 8.0.3)</span><br><span class="line">SWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software.</span><br><span class="line">Please run ?- license. for legal details.</span><br><span class="line"></span><br><span class="line">For online help and background, visit http:&#x2F;&#x2F;www.swi-prolog.org</span><br><span class="line">For built-in help, use ?- help(Topic). or ?- apropos(Word).</span><br><span class="line"></span><br><span class="line">?- friend(X, Y).</span><br><span class="line">false.</span><br></pre></td></tr></table></figure><p>程序返回了 <code>false.</code> 显然他们三个当不成朋友。</p><h2 id="写-Prolog"><a href="#写-Prolog" class="headerlink" title="写 Prolog"></a>写 Prolog</h2><p>一开始我花了一个小时，吭哧吭哧就写完了程序。一开始约束条件写得太松散，嵌套太多太复杂，结果跑了好几个小时都没跑出来。</p><blockquote><p>第一次有了喜欢的事情（指数学）。有了能做一辈子的事业（指写代码）。两件快乐事情重合在一起。而这两份快乐，又给我带来更多的快乐。得到的，本该是像梦境一般幸福的时间……但是，为什么，会变成这样呢……</p></blockquote><p>第二天想到了这个问题和一个经典逻辑问题「谁养鱼」是比较类似的，翻了翻正好看到这个问题在 SWI-Prolog 的<a href="https://swish.swi-prolog.org/p/fish_puzzle_marijke.pl" target="_blank" rel="noopener">例子</a>里。学习了一下别人是怎么写的，改了一下程序竟然就秒解了。最后的程序如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 1. Alice is level 7.</span></span><br><span class="line"><span class="comment">% 2. The level 7 agent was in squad Foot-E.</span></span><br><span class="line"><span class="comment">% 3. The agent in squad Foot-E started playing in 2016.</span></span><br><span class="line"><span class="comment">% 4. Alice started playing in 2018.</span></span><br><span class="line"><span class="comment">% 5. The level 16 agent has a founders badge.</span></span><br><span class="line"><span class="comment">% 6. Bob has a gold innovator badge.</span></span><br><span class="line"><span class="comment">% 7. David started playing before Eve, who started playing before Clarie.</span></span><br><span class="line"><span class="comment">% 8. The agent who started playing in 2014 was on squad Bike-1.</span></span><br><span class="line"><span class="comment">% 9. The agent who started playing in 2015 is the recursed level 12 agent.</span></span><br><span class="line"><span class="comment">% 10. The agent in squad Bike-3 was level 9.</span></span><br><span class="line"><span class="comment">% 11. Clarie started playing in 2016.</span></span><br><span class="line"><span class="comment">% 12. The two agents who were on bikes were the agent who started in 2016 and the level 13 agent.</span></span><br><span class="line"><span class="comment">% 13. The level 16 agent was in squad Foot-A.</span></span><br><span class="line"><span class="comment">% 14. The agent who started in 2015 was in squad Foot-R.</span></span><br><span class="line"><span class="comment">% 15. Bob was on a bike.</span></span><br><span class="line"><span class="comment">% 16. The agent who started playing in 2013 was in squad Foot-A.</span></span><br><span class="line"></span><br><span class="line">year(<span class="number">2013</span>). year(<span class="number">2014</span>). year(<span class="number">2015</span>). year(<span class="number">2016</span>). year(<span class="number">2017</span>). year(<span class="number">2018</span>). year(<span class="number">2019</span>).</span><br><span class="line">earlier(<span class="symbol">A</span>, <span class="symbol">B</span>) :- year(<span class="symbol">A</span>), year(<span class="symbol">B</span>), <span class="symbol">A</span> @&lt; <span class="symbol">B</span>.</span><br><span class="line"></span><br><span class="line">agents(<span class="symbol">Ag</span>):-</span><br><span class="line">  <span class="comment">% each agent in the list Ag of agent is represented as:</span></span><br><span class="line">  <span class="comment">%      h(Name, Level, Year, Type, Squad)</span></span><br><span class="line">  length(<span class="symbol">Ag</span>, <span class="number">5</span>),</span><br><span class="line">  member(h(alice, <span class="number">7</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 1</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="number">7</span>, <span class="symbol">_</span>, foot, e), <span class="symbol">Ag</span>), <span class="comment">% 2</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="symbol">_</span>, <span class="number">2016</span>, foot, e), <span class="symbol">Ag</span>), <span class="comment">% 3</span></span><br><span class="line">  member(h(alice, <span class="symbol">_</span>, <span class="number">2018</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 4</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="number">16</span>, <span class="number">2013</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 5</span></span><br><span class="line">  (member(h(bob, <span class="symbol">_</span>, <span class="number">2014</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>); member(h(bob, <span class="symbol">_</span>, <span class="number">2013</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>)), <span class="comment">% 6</span></span><br><span class="line">  member(h(david, <span class="symbol">_</span>, <span class="symbol">Yd</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 7</span></span><br><span class="line">  member(h(eve, <span class="symbol">_</span>, <span class="symbol">Ye</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>),</span><br><span class="line">  member(h(clarie, <span class="symbol">_</span>, <span class="symbol">Yc</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>),</span><br><span class="line">  earlier(<span class="symbol">Yd</span>, <span class="symbol">Ye</span>), earlier(<span class="symbol">Ye</span>, <span class="symbol">Yc</span>),</span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="symbol">_</span>, <span class="number">2014</span>, bike, one), <span class="symbol">Ag</span>), <span class="comment">% 8</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="number">12</span>, <span class="number">2015</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 9</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="number">9</span>, <span class="symbol">_</span>, bike, three), <span class="symbol">Ag</span>), <span class="comment">% 10</span></span><br><span class="line">  member(h(clarie, <span class="symbol">_</span>, <span class="number">2016</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 11</span></span><br><span class="line">  member(h(<span class="symbol">A</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, bike, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 12</span></span><br><span class="line">  member(h(<span class="symbol">B</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, bike, <span class="symbol">_</span>), <span class="symbol">Ag</span>),</span><br><span class="line">  \+ <span class="symbol">A</span>=<span class="symbol">B</span>,</span><br><span class="line">  ((member(h(<span class="symbol">A</span>, <span class="number">13</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), member(h(<span class="symbol">B</span>, <span class="symbol">_</span>, <span class="number">2016</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>));</span><br><span class="line">  (member(h(<span class="symbol">B</span>, <span class="number">13</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), member(h(<span class="symbol">A</span>, <span class="symbol">_</span>, <span class="number">2016</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>))),</span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="number">16</span>, <span class="symbol">_</span>, foot, a), <span class="symbol">Ag</span>), <span class="comment">% 13</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="symbol">_</span>, <span class="number">2015</span>, foot, r), <span class="symbol">Ag</span>), <span class="comment">% 14</span></span><br><span class="line">  member(h(bob, <span class="symbol">_</span>, <span class="symbol">_</span>, bike, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 15</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="symbol">_</span>, <span class="number">2013</span>, foot, a), <span class="symbol">Ag</span>). <span class="comment">% 16</span></span><br></pre></td></tr></table></figure><p>其中几个需要注意的是，一个是加入年份，为了程序能够在有限的整数空间里搜索，设定了条件：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">year(<span class="number">2013</span>). year(<span class="number">2014</span>). year(<span class="number">2015</span>). year(<span class="number">2016</span>). year(<span class="number">2017</span>). year(<span class="number">2018</span>). year(<span class="number">2019</span>).</span><br><span class="line">earlier(<span class="symbol">A</span>, <span class="symbol">B</span>) :- year(<span class="symbol">A</span>), year(<span class="symbol">B</span>), <span class="symbol">A</span> @&lt; <span class="symbol">B</span>.</span><br></pre></td></tr></table></figure><p>然后 Bob 有 Innovator 牌，光这个条件是不能判断具体是 2013 还是 2014 加入游戏的，所以写了一个或条件：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(member(h(bob, <span class="symbol">_</span>, <span class="number">2014</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>); member(h(bob, <span class="symbol">_</span>, <span class="number">2013</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>)), <span class="comment">% 6</span></span><br></pre></td></tr></table></figure><p>还有一条就是两个自行车队的一个是 2016 年加入的，另一个是 13 级，这句话转换成谓词逻辑有点绕：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">member(h(<span class="symbol">A</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, bike, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 12</span></span><br><span class="line">member(h(<span class="symbol">B</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, bike, <span class="symbol">_</span>), <span class="symbol">Ag</span>),</span><br><span class="line">\+ <span class="symbol">A</span>=<span class="symbol">B</span>,</span><br><span class="line">((member(h(<span class="symbol">A</span>, <span class="number">13</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), member(h(<span class="symbol">B</span>, <span class="symbol">_</span>, <span class="number">2016</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>));</span><br><span class="line">(member(h(<span class="symbol">B</span>, <span class="number">13</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), member(h(<span class="symbol">A</span>, <span class="symbol">_</span>, <span class="number">2016</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>))),</span><br></pre></td></tr></table></figure><p>跑了一下，当然是 <code>false.</code>。因为其中有一个条件是错误的。于是从第一个条件开始尝试一个个注释掉。</p><p>注释到第四个，秒解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❯ swipl archetype.pl </span><br><span class="line">Welcome to SWI-Prolog (threaded, 64 bits, version 8.0.3)</span><br><span class="line">SWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software.</span><br><span class="line">Please run ?- license. for legal details.</span><br><span class="line"></span><br><span class="line">For online help and background, visit http:&#x2F;&#x2F;www.swi-prolog.org</span><br><span class="line">For built-in help, use ?- help(Topic). or ?- apropos(Word).</span><br><span class="line"></span><br><span class="line">?- agents(Ag).</span><br><span class="line">Ag &#x3D; [h(alice, 7, 2016, foot, e), h(david, 16, 2013, foot, a), h(bob, 13, 2014, bike, one), h(eve, 12, 2015, foot, r), h(clarie, 9, 2016, bike, three)] .</span><br></pre></td></tr></table></figure><p>程序给出的第一组解如下（不唯一）：</p><table><thead><tr><th>名字</th><th>级别</th><th>加入年份</th><th>Squad 类型</th><th>Squad 编号</th></tr></thead><tbody><tr><td>Alice</td><td>7</td><td>2016</td><td>Foot</td><td>E</td></tr><tr><td>Bob</td><td>13</td><td>2014</td><td>Bike</td><td>1</td></tr><tr><td>Clarie</td><td>9</td><td>2016</td><td>Bike</td><td>3</td></tr><tr><td>David</td><td>16</td><td>2013</td><td>Foot</td><td>A</td></tr><tr><td>Eve</td><td>12</td><td>2015</td><td>Foot</td><td>R</td></tr></tbody></table><p>答案是 <code>E13AR</code>，完全没有错。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个例子很好展示了上世纪 90 年代人工智能研究的奥妙。还有就是不要钻牛角尖，几秒钟就解出来的题不要浪费一天去写代码。但我写了一天才写出来只能说明是我菜，这程序运行只花了几毫秒就找到解了还是挺厉害的。数学的发展可能关乎着真正强人工智能的诞生，希望大家多学数学，少写 JavaScript。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;13 Archetypes: Skeptic 的谜题由三个单独的谜题组成。这三个谜题唯一的共同点就是，它们都有一个错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/archetypes-skeptic.jpg&quot; alt=&quot;13 Archetypes: Skeptic
      
    
    </summary>
    
    
      <category term="游戏" scheme="https://coderemixer.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="设计" scheme="https://coderemixer.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Ingress" scheme="https://coderemixer.com/tags/Ingress/"/>
    
      <category term="Prolog" scheme="https://coderemixer.com/tags/Prolog/"/>
    
      <category term="逻辑学" scheme="https://coderemixer.com/tags/%E9%80%BB%E8%BE%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>元胞自动机 101 —— 13 Archetypes: Humanist</title>
    <link href="https://coderemixer.com/2020/01/14/archetypes-humanity/"/>
    <id>https://coderemixer.com/2020/01/14/archetypes-humanity/</id>
    <published>2020-01-14T05:22:47.000Z</published>
    <updated>2020-08-12T09:01:05.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>前一晚改论文改睡着了，结果错过了。早上醒来发现题目还挺简单的，来聊一聊谜题的出题思路吧。</p><p><img src="https://storage.googleapis.com/ingress-internal-event-data/13archetypes/humanist/humanist2_a6f9854f-6e0c-5050-a10d-91f4aaa4c382.png" alt="题目"></p><h2 id="一种新科学"><a href="#一种新科学" class="headerlink" title="一种新科学"></a>一种新科学</h2><p>元胞自动机是一种由元胞、元胞状态、领域、和状态更新规则构成的一个自动机，其数学表达为：</p><p>$$ A = (L, d, S, N, f) $$</p><p>换成人话就是说，对于一个 d 维度的有限状态矩阵，每次每个格点的状态更新取决于其上一次中周围格点的状态。元胞自动机是研究混沌现象的一个重要模型，在 Wolfram 出版的书籍《一种新科学》（我个人对这是不是一种新科学持保留态度）中被进行了非常深入的探讨。</p><p>Wolfram 把初等一维元胞自动机的全部 256 种规则进行了分类，分成了四类：平稳型、周期型、混沌型、复杂型。</p><ul><li>平稳型就是无论初始局面如何，最后终会变成稳定均匀状态。</li><li>周期性则是无论初始局面如何，最终会变成稳定的震荡结构，随机性会被过滤。</li><li>混沌型指初始局面会演化成一个伪随机或混沌状状态。</li><li>复杂型则是上面的一系列组合，可能会出现混沌，而一部分的初始结构会稳定保留，结构于结构会相互作用。（比如像规则 110 被证明是图灵完备的，那么其局面自然会随着初始输入变化有很大变化，可能稳定可能混沌了。）</li></ul><p>但这个分类有个很大的问题，就是每一个类别几乎都能找到例外。所以这到底是一种新科学还是一种伪科学还是有点迷幻的。</p><h2 id="最有名的元胞自动机"><a href="#最有名的元胞自动机" class="headerlink" title="最有名的元胞自动机"></a>最有名的元胞自动机</h2><p>最有名的元胞自动机是 1970 年由英国数学家约翰·何顿·康威提出的康威生命游戏（Conway’s Game of Life）其规则如下：</p><ul><li>元胞自动机的维度是 2（运行在 2 维平面上）</li><li>状态只有两种，存活和死亡</li><li>当周围存活元胞是 0 个或 1 个时，其会死亡（太孤独了，无聊死了）</li><li>当周围存活元胞是 2 个或 3 个时，保持原样</li><li>当周围存活元胞是 4 个时，该元胞死亡（没饭吃饿死了）</li><li>当周围存活元胞是 3 个，且当前元胞是死亡状态时，该元胞变成存活（模拟繁殖）</li></ul><p>这个游戏按 Wolfram 的分类应该是第四种复杂型。而我们的这个谜题，就是把图输入到这种自动机里，然后跑一下就结束了。</p><h2 id="怎么解题"><a href="#怎么解题" class="headerlink" title="怎么解题"></a>怎么解题</h2><p>模拟它应该是要写个程序的，毕竟手推太麻烦了。Game of Life 的实现大概满世界都是吧。打开 <a href="https://leetcode.com/problems/game-of-life/solution/" target="_blank" rel="noopener">LeetCode</a> 的题解抄下来稍微改改就有了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameOfLifeInfinite</span><span class="params">(live)</span>:</span></span><br><span class="line">  ctr = collections.Counter((I, J)</span><br><span class="line">                            <span class="keyword">for</span> i, j <span class="keyword">in</span> live</span><br><span class="line">                            <span class="keyword">for</span> I <span class="keyword">in</span> range(i<span class="number">-1</span>, i+<span class="number">2</span>)</span><br><span class="line">                            <span class="keyword">for</span> J <span class="keyword">in</span> range(j<span class="number">-1</span>, j+<span class="number">2</span>)</span><br><span class="line">                            <span class="keyword">if</span> I != i <span class="keyword">or</span> J != j)</span><br><span class="line">  <span class="keyword">return</span> &#123;ij</span><br><span class="line">    <span class="keyword">for</span> ij <span class="keyword">in</span> ctr</span><br><span class="line">    <span class="keyword">if</span> ctr[ij] == <span class="number">3</span> <span class="keyword">or</span> ctr[ij] == <span class="number">2</span> <span class="keyword">and</span> ij <span class="keyword">in</span> live&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameOfLife</span><span class="params">(board)</span>:</span></span><br><span class="line">  live = &#123;(i, j) <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(board) <span class="keyword">for</span> j, live <span class="keyword">in</span> enumerate(row) <span class="keyword">if</span> live&#125;</span><br><span class="line">  live = gameOfLifeInfinite(live)</span><br><span class="line">  <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(board):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(row)):</span><br><span class="line">      row[j] = int((i, j) <span class="keyword">in</span> live)</span><br><span class="line"></span><br><span class="line">board = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">gameOfLife(board)</span><br><span class="line">print(board)</span><br></pre></td></tr></table></figure><p>比较恶心的是，我们怎么去把图片转换成矩阵。据说大多数人都是手弄的。我觉得有点过分了，毕竟也是一个 27 x 27 的超大矩阵，手抄一抄得抄 729 个数字。咱这也不是庙会的抄数字赢钱的摊，咱还是找个自动化的方法来处理吧。</p><p>我们先裁切一下图片，减少一下代码量，变成：</p><p><img src="/static/game-of-life-ingress.png" alt="裁切后图像"></p><p>然后我们写点 OpenCV 的代码来做图像处理和转换，简单来说就是二值化，然后压缩成 27x27（因为像素冗余有够大，直接压大概不会被边框影响到），然后直接除以 255 变成 01 矩阵，跑完打印出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameOfLifeInfinite</span><span class="params">(live)</span>:</span></span><br><span class="line">  ctr = collections.Counter((I, J)</span><br><span class="line">                            <span class="keyword">for</span> i, j <span class="keyword">in</span> live</span><br><span class="line">                            <span class="keyword">for</span> I <span class="keyword">in</span> range(i<span class="number">-1</span>, i+<span class="number">2</span>)</span><br><span class="line">                            <span class="keyword">for</span> J <span class="keyword">in</span> range(j<span class="number">-1</span>, j+<span class="number">2</span>)</span><br><span class="line">                            <span class="keyword">if</span> I != i <span class="keyword">or</span> J != j)</span><br><span class="line">  <span class="keyword">return</span> &#123;ij</span><br><span class="line">    <span class="keyword">for</span> ij <span class="keyword">in</span> ctr</span><br><span class="line">    <span class="keyword">if</span> ctr[ij] == <span class="number">3</span> <span class="keyword">or</span> ctr[ij] == <span class="number">2</span> <span class="keyword">and</span> ij <span class="keyword">in</span> live&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameOfLife</span><span class="params">(board)</span>:</span></span><br><span class="line">  live = &#123;(i, j) <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(board) <span class="keyword">for</span> j, live <span class="keyword">in</span> enumerate(row) <span class="keyword">if</span> live&#125;</span><br><span class="line">  live = gameOfLifeInfinite(live)</span><br><span class="line">  <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(board):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(row)):</span><br><span class="line">      row[j] = int((i, j) <span class="keyword">in</span> live)</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'/Users/delton/Desktop/game-of-life-ingress.png'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert RGB to Binary Image</span></span><br><span class="line">ret, bw_img = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert to 27x27</span></span><br><span class="line"><span class="comment"># 反正像素冗余那么大，直接转换多半不会出问题</span></span><br><span class="line">resized_image = cv2.resize(bw_img, (<span class="number">27</span>, <span class="number">27</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pick Channel 0 only</span></span><br><span class="line">board = resized_image[:, :, <span class="number">0</span>] / <span class="number">255</span></span><br><span class="line">gameOfLife(board)</span><br><span class="line">print(board)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Revert Black and White</span></span><br><span class="line">cv2.imshow(<span class="string">"Result"</span>, <span class="number">1.0</span> - board)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/static/humanity-result.png" alt="解码结果"></p><p>扫码：</p><p><img src="/static/humanity-scan.jpg" alt="扫码结果"></p><p>结束。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li><p><a href="https://youtu.be/GQNREcMVPHY" target="_blank" rel="noopener">生命游戏：另一种计算机 —— 混乱博物馆</a></p></li><li><p><a href="https://www.youtube.com/watch?v=2lfVFOXzonY" target="_blank" rel="noopener">混沌与分形 —— MommyTalk</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;前一晚改论文改睡着了，结果错过了。早上醒来发现题目还挺简单的，来聊一聊谜题的出题思路吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://stor
      
    
    </summary>
    
    
      <category term="游戏" scheme="https://coderemixer.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="设计" scheme="https://coderemixer.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Ingress" scheme="https://coderemixer.com/tags/Ingress/"/>
    
      <category term="元胞自动机" scheme="https://coderemixer.com/tags/%E5%85%83%E8%83%9E%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="混沌" scheme="https://coderemixer.com/tags/%E6%B7%B7%E6%B2%8C/"/>
    
  </entry>
  
  <entry>
    <title>从 bopomofo 说起 —— 学习注音符号后对拼音系统的一些新体悟</title>
    <link href="https://coderemixer.com/2020/01/10/from-bopomofo/"/>
    <id>https://coderemixer.com/2020/01/10/from-bopomofo/</id>
    <published>2020-01-10T13:06:49.000Z</published>
    <updated>2020-08-12T09:01:06.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些理由"><a href="#一些理由" class="headerlink" title="一些理由"></a>一些理由</h2><p>众所周知，我从小接受的用于标记现代标准汉语的系统是「汉语拼音」。两年前，我决定学习一下「注音符号」。注音符号是以章太炎编创的「纽文」、「韵文」为蓝本，设计的一套汉语拼音方案。其实最早决定去学的原因还是好奇好玩，用一套完全不熟悉的拼读系统来学习自己已经掌握的汉语发音，可以很好从另一个方面来认识汉语的发音系统。最后也证明这样的形式确实帮助我从某种角度重新认识了汉语发音，特别是当这套系统和汉语拼音符号本身产生差异的时候，通过深究差异产生的原因，极大提高了我对汉语发音的理解，可以说是受益良多。下面就来分享一些，我学习过程中遇到的一些有意思的事情。</p><p>先放一个我在 YouTube 上看到的「注音符号歌」，让没有听说过这个系统的人有个大概的印象。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/n0G-cKUkt3c" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>（比较可怕的是这个影片播放完后的推荐影片里都是一些真的不明所以非常奇怪的儿童影片）</p><h2 id="前四个声母"><a href="#前四个声母" class="headerlink" title="前四个声母"></a>前四个声母</h2><p>一个有意思的现象是，虽然「注音符号」的英文叫「Bopomofo Symbols」。但显然，背诵注音符号表的时候，这四个音用的都不是 /o/ 的韵母，而是使用 /ɤ/。「ㄅㄆㄇㄈ」念成 /pɤ/ /pʰɤ/ /mɤ/ /fɤ/。相反，我们在背诵汉语拼音表的时候，倒是真的拼成了 /o/，bo po mo fo /po/ /pʰo/ /mo/ /fo/ 。</p><p>不过突然发现，bo po mo fo 小时候老师教的都是发成闭口呼，也就是 ㄅㄨㄛ buo ㄆㄨㄛ puo ㄇㄨㄛ muo ㄈㄨㄛ fuo。但是无论是查大陆的使用拼音的字典，还是台湾的教育部国语辞典，都不会拼入ㄨ，坚持使用开口呼。而且看一些比较权威的汉语拼音或者注音的教学录音，都是录的开口呼，和学得并不一样。</p><p>查了一下发现，北京音的「波（ㄅㄛ）坡（ㄆㄛ）摸（ㄇㄛ）佛（ㄈㄛ）」一直到新国音还一直开口呼。拼成 bo po mo fo 很好保留了当时的语音。一直到近几十年，才有人开始不区分开口呼和闭口呼，把「菠菜」念成ㄅㄨㄛ ㄘㄞˋ，这不是什么省略 ㄨ (u) 的结果。</p><p>而北京音在晚清到民国早年「多（ㄉㄛ）拖（ㄊㄛ）挪（ㄋㄛ）罗（ㄌㄛ）」虽然也是开口呼，到新国音的时候就已经逐渐转换成闭口呼，也就是 ㄉㄨㄛ ㄊㄨㄛ ㄋㄨㄛ ㄌㄨㄛ，所以汉语拼音也是按 duo tuo nuo luo 拼写。</p><h2 id="e-的奇妙之旅"><a href="#e-的奇妙之旅" class="headerlink" title="e 的奇妙之旅"></a>e 的奇妙之旅</h2><p>另外一个发现就是，汉语拼音里的 e，实际上发的音可太多了，因为注音把所有复合韵母单独设计了符号，所以一下子显得特别明显。整理了一下，至少可以发 /ɤ/ /e/ /ə/ 这三个音，还可能在一些情况下发成 /ɑ/ 或者 /ɐ/ 这种听起来更像 a 的音。在注音符号中，复音韵母使用完全独立的符号，但是在汉语拼音中使用一些单音韵母的符号再进行一些组合，但是复音韵母可能和单音韵母的发音有很大的差异。</p><p>下面给一些例子：</p><p>得 (ㄉㄜˊ, dé) 里的韵母是 /ɤ/</p><p>谁 (ㄕㄟˊ, shéi) 里的韵母是 /ei̯/</p><p>申 (ㄕㄣ, shēn) 里的韵母是 /ən/</p><p>生 (ㄕㄥ, shēng) 里的韵母是 /ɤŋ/</p><p>另外还有个最奇怪的「二」（ㄦˋ, èr），包括我在内的很多人都会念成 /ɐɻ/。我查了下，很多教程上的 IPA 拼音标成了 /ɑɻ/。如果是这么发的话，汉语拼音是不是标成 àr 更好？查了一下，一说是对于是 /ɐɚ/ /ɑɻ/ /ɤɻ/ 还是 /ɚ/ 存在很大争议。20 年代的很多北京话录音中，发得比较接近 /ɚ/ 到 /əɻ/ 中间的感觉，所以这一标记也可能是历史原因产生的。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>现代标准汉语是基于北京音设计的，而这里的北京音和现在的北京音还是有很大差异的。要想理解注音符号和汉语拼音的很多特点，确实需要了解那个时空北京下的北京音。我在写这个文章的时候，发现了一个非常有意思的系列视频，最后推荐大家看一看。里面对很多细节的描述也非常清晰，我甚至是看了这个影片后才发现，现代标准汉语里的「你」「娘」「牛」韵母是 /n/ 而不是硬腭化的 /ɲ/ 或者 /ȵ/，给我念错几十年的人生带来了极大的震撼。</p><iframe src="//player.bilibili.com/player.html?aid=62002848&cid=137623039&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><a href="https://www.bilibili.com/video/av62002848/" target="_blank" rel="noopener">影片地址</a></p><p>对于文字不能直接反映读音的语言来说，通常都会引入一个标注发音的方案，从美语的 KK 音标，现代标准汉语的注音、拼音、威妥玛，以及很多方言的像是闽拼、台罗、教罗、上海话钱乃荣方案、耶鲁粤拼、香港教育学院粤拼等一大堆拼音方案。很多方案直接的标注都是互相冲突的，有的时候看到这堆拉丁字母，真的不知道到底要怎么读。但每个方案都有自己设计的时空背景、设计的动机，通过了解这些不同方案设计的背景和动机，可以从不同的角度重新认识语言，让自己对于语音的理解提升更高的层次。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一些理由&quot;&gt;&lt;a href=&quot;#一些理由&quot; class=&quot;headerlink&quot; title=&quot;一些理由&quot;&gt;&lt;/a&gt;一些理由&lt;/h2&gt;&lt;p&gt;众所周知，我从小接受的用于标记现代标准汉语的系统是「汉语拼音」。两年前，我决定学习一下「注音符号」。注音符号是以章太炎编创的
      
    
    </summary>
    
    
      <category term="语言学" scheme="https://coderemixer.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6/"/>
    
      <category term="汉语" scheme="https://coderemixer.com/tags/%E6%B1%89%E8%AF%AD/"/>
    
      <category term="官话" scheme="https://coderemixer.com/tags/%E5%AE%98%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>大猩猩的乐谱有多少错误？—— 13 Archetypes: Listener 解谜翻船记</title>
    <link href="https://coderemixer.com/2020/01/07/archetypes-listener/"/>
    <id>https://coderemixer.com/2020/01/07/archetypes-listener/</id>
    <published>2020-01-07T05:01:14.000Z</published>
    <updated>2020-08-12T09:01:05.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>北京时间 2019 年 1 月 6 日夜间开始了 13 Archetypes 解谜的 Listener 篇。游戏一开始还因为文件名里有 Mfb（某脏话的缩写），导致线索没有如期发布。在一番折腾后，终于看到了这次的谜面，一份乐谱。</p><p><img src="/static/archetypes-listener.png" alt="乐谱"></p><p>这次的解法有多狗血暂且不论，这里就来谈谈这简简单单 9 个小节的乐谱犯了多少个错误，以及这些错误是如何把我带进沟里的。</p><h2 id="拍子怎么数？"><a href="#拍子怎么数？" class="headerlink" title="拍子怎么数？"></a>拍子怎么数？</h2><p>五线谱中，我们会看到音符和音符中间会有纵线相隔，这些纵线叫作「小节线」，两条小节线之间叫作「小节」。通常而言，每个小节的节拍数量是固定的。一般在乐谱的开始，或者要变换节拍的时候在小节的一开始写上一个分数，表示之后小节的节拍，这个分数叫作「拍号」。分母表示小节以几分音符为一拍，而分子表示每小节为一拍。比如流行音乐常见的 $ \frac{4}{4} $ 拍，指的就是以四分音符为一拍，一个小节放 4 个四分音符。</p><p>猩猩的这份谱子是 $\frac{2}{4}$ 拍的，也就是说，以四分音符为一拍，一个小节放 2 个四分音符。就算乐谱的开始和结束的节拍数可以有一定例外，那么聪明的你告诉我，高音部的第 4、6、8 小节，低音部的第 2、5、7、8 小节都是一些什么妖魔鬼怪。</p><p>站在事后诸葛亮的角度，我们知道要把两个部的音符直接合在一起看就能产生一个 20 个字符的序列，但问题是，按照这样的写法，这几个小节谁写在前谁写在后是完全不能判断的，除非完全根据图像上的前后关系来写，这对于乐谱来说完全是莫名其妙的。</p><h2 id="十二平均律与调"><a href="#十二平均律与调" class="headerlink" title="十二平均律与调"></a>十二平均律与调</h2><p>钢琴的调律法称为十二平均律。也就是说从一个 C 到下一个八度里的 C 之间隔了 12 个音。音和音之间的频率的倍率是 $\sqrt[12]{\frac{1}{2}}$。我们熟悉的 do re mi fa sol la si 这 7 个音会以某种形式落在 12 个音上，而这种落上去的方法叫作「调」。猩猩的这份乐谱在一开始没有标记任何升降记号，按自然音阶理解就是所谓的 C 大调或者 a 小调，我们以 C 大调为例（a 小调同理）组成音是 C D E F G A B，do 对应 C。没有出现在这 7 个音里的其它音需要用升降记号标记，比如 C# (Db), D# (Eb) 等。</p><p>这份谱妙就妙在出现了一堆不可能出现的音，比如低音部第六小节的第一颗音，就是不存在的 E#，E# 就是 F，除非是在一些特殊功能下需要特别表示这颗 F 是由一颗 E 变过来时才可能在上面写升号。我一度以为这份谱子的调号标错了，尝试把谱子看成 G 大调上的谱子以合理化它，但是结果表明一丁点关系都没有，因为这份谱子还有一个更严重的问题。</p><h2 id="大熊猫和北极熊"><a href="#大熊猫和北极熊" class="headerlink" title="大熊猫和北极熊"></a>大熊猫和北极熊</h2><p>但比起调号的问题，更严重的问题是大猩猩对于升降记号的理解。如我们刚刚所说，升降记号的存在可以标记出所在调中没有的音，也就是在 7 个音上加标记来表示 12 个音。但似乎在大猩猩的理解中，这个世界的钢琴的一个八度不是 12 个音的，而是 7 个音的。因为在解谜过程中，你需要把 C# 看成 D，把 Db 看成 C 才可以正确求出字符串。如果说你是一个七音音阶的什么古乐器也就算了，大猩猩还大言不惭的在左边特意标出了乐器是 Piano 和 Keyboard，一种现代的黑白键十二平均律乐器。</p><p>也就是说，猩猩家的钢琴，只有白键，没有黑键。我想在猩猩的世界里，下面这个动物叫「大熊猫」吧。</p><p><img src="/static/polar-beer.png" alt="大熊猫？是北极熊啦"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>推理小说十诫中有说：「侦探不应把焦点集中在无关案情的线索，避免误导读者。」</p><p>这其实是作为一种智力博弈游戏的一个重要前提。游戏中错误的乐器、调号让我长时间陷入到对这些极具特殊性的线索的思考中。而且非常让人奇怪的是，解谜涉及了要将某两个字母映射到一个数字的这种后处理方法，而却没有把连接线连接在这些确实需要连接的东西上，谱子上所有的连接线都是单纯误导性的。更不要说还有完全没有意义的红色音符。</p><p>也就是说这个谜题的出题者，在完全不懂乐理、缺乏乐谱的基本常识下，打开了打谱软件随便划拉了一下，就把问题交由全世界的解谜者来解谜。这个谜题的名字叫 Listener，我觉得晚年贝多芬都比出题者更配当一个 Listener。</p><p>如果要解出这个谜题，恐怕要把自己的音乐常识降低到和猩猩一样才能做出来吧。</p><p><strong>救救我们的音乐通识教育吧，别＊＊再糟蹋音乐了。</strong> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;北京时间 2019 年 1 月 6 日夜间开始了 13 Archetypes 解谜的 Listener 篇。游戏一开始还因为文件名里有 Mf
      
    
    </summary>
    
    
      <category term="游戏" scheme="https://coderemixer.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="设计" scheme="https://coderemixer.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Ingress" scheme="https://coderemixer.com/tags/Ingress/"/>
    
  </entry>
  
</feed>
